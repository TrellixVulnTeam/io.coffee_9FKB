# Copyright Joyent, Inc. and other Node contributors.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the
# following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
# NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
# USE OR OTHER DEALINGS IN THE SOFTWARE.
common = require("../common")
assert = require("assert")
path = require("path")
fs = require("fs")
if process.platform is "darwin"
  cleanup = ->
    try
      fs.unlinkSync filepathOne
    try
      fs.rmdirSync testsubdir
    return
  watchSeenOne = 0
  testDir = common.tmpDir
  filenameOne = "watch.txt"
  testsubdirName = "testsubdir"
  testsubdir = path.join(testDir, testsubdirName)
  relativePathOne = path.join("testsubdir", filenameOne)
  filepathOne = path.join(testsubdir, filenameOne)
  process.on "exit", ->
    assert.ok watchSeenOne > 0
    return

  try
    fs.mkdirSync testsubdir, 0700
  assert.doesNotThrow ->
    watcher = fs.watch(testDir,
      recursive: true
    )
    watcher.on "change", (event, filename) ->
      assert.ok "change" is event or "rename" is event
      
      # Ignore stale events generated by mkdir
      return  if filename is testsubdirName
      assert.equal relativePathOne, filename
      watcher.close()
      cleanup()
      ++watchSeenOne
      return

    return

  setTimeout (->
    fs.writeFileSync filepathOne, "world"
    return
  ), 10
