"use strict"
test = require("tap").test
requireInject = require("require-inject")
path = require("path")
re =
  tarball: /[\/\\]a.tar.gz$/
  packagedir: /[\/\\]b$/
  packagejson: /[\/\\]b[\/\\]package.json$/
  nonpackagedir: /[\/\\]c$/
  nopackagejson: /[\/\\]c[\/\\]package.json$/
  remotename: /[\/\\]d$/
  packagedirlikegithub: /[\/\\]e[\/\\]1$/
  packagejsonlikegithub: /[\/\\]e[\/\\]1[\/\\]package.json$/
  github: /[\/\\]e[\/\\]2$/

rps = requireInject("../index",
  fs:
    stat: (path, callback) ->
      if re.tarball.test(path)
        callback null,
          isDirectory: ->
            false

      else if re.packagedir.test(path)
        callback null,
          isDirectory: ->
            true

      else if re.packagejson.test(path)
        callback null, {}
      else if re.nonpackagedir.test(path)
        callback null,
          isDirectory: ->
            true

      else if re.nopackagejson.test(path)
        callback new Error("EFILENOTFOUND")
      else if re.remotename.test(path)
        callback new Error("EFILENOTFOUND")
      else if re.packagedirlikegithub.test(path)
        callback null,
          isDirectory: ->
            true

      else if re.packagejsonlikegithub.test(path)
        callback null, {}
      else if re.github.test(path)
        callback new Error("EFILENOTFOUND")
      else
        throw new Error("Unknown stat fixture path: " + path)
      return
)
test "realize-package-specifier", (t) ->
  t.plan 10
  rps "a.tar.gz", (err, result) ->
    t.is result.type, "local", "local tarball"
    return

  rps "b", (err, result) ->
    t.is result.type, "directory", "local package directory"
    return

  rps "c", (err, result) ->
    t.is result.type, "range", "remote package, non-package local directory"
    return

  rps "d", (err, result) ->
    t.is result.type, "range", "remote package, no local directory"
    return

  rps "file:./a.tar.gz", (err, result) ->
    t.is result.type, "local", "local tarball"
    return

  rps "file:./b", (err, result) ->
    t.is result.type, "directory", "local package directory"
    return

  rps "file:./c", (err, result) ->
    t.is result.type, "local", "non-package local directory, specified with a file URL"
    return

  rps "file:./d", (err, result) ->
    t.is result.type, "local", "no local directory, specified with a file URL"
    return

  rps "e/1", (err, result) ->
    t.is result.type, "directory", "local package directory"
    return

  rps "e/2", (err, result) ->
    t.is result.type, "github", "github package dependency"
    return

  return

test "named realize-package-specifier", (t) ->
  t.plan 10
  rps "a@a.tar.gz", (err, result) ->
    t.is result.type, "local", "named local tarball"
    return

  rps "b@b", (err, result) ->
    t.is result.type, "directory", "named local package directory"
    return

  rps "c@c", (err, result) ->
    t.is result.type, "tag", "remote package, non-package local directory"
    return

  rps "d@d", (err, result) ->
    t.is result.type, "tag", "remote package, no local directory"
    return

  rps "a@file:./a.tar.gz", (err, result) ->
    t.is result.type, "local", "local tarball"
    return

  rps "b@file:./b", (err, result) ->
    t.is result.type, "directory", "local package directory"
    return

  rps "c@file:./c", (err, result) ->
    t.is result.type, "local", "non-package local directory, specified with a file URL"
    return

  rps "d@file:./d", (err, result) ->
    t.is result.type, "local", "no local directory, specified with a file URL"
    return

  rps "e@e/1", (err, result) ->
    t.is result.type, "directory", "local package directory"
    return

  rps "e@e/2", (err, result) ->
    t.is result.type, "github", "github package dependency"
    return

  return

