
###*
repeat string `str` up to total length of `len`

@param String str string to repeat
@param Number len total length of output string
###
repeatString = (str, len) ->
  Array.apply(null,
    length: len + 1
  ).join(str).slice 0, len

###*
Pad `str` up to total length `max` with `chr`.
If `str` is longer than `max`, padRight will return `str` unaltered.

@param String str string to pad
@param Number max total length of output string
@param String chr optional. Character to pad with. default: ' '
@return String padded str
###
padRight = (str, max, chr) ->
  str = (if str? then str else "")
  str = String(str)
  length = max - wcwidth(str)
  return str  if length <= 0
  str + repeatString(chr or " ", length)

###*
Pad `str` up to total length `max` with `chr`.
If `str` is longer than `max`, padCenter will return `str` unaltered.

@param String str string to pad
@param Number max total length of output string
@param String chr optional. Character to pad with. default: ' '
@return String padded str
###
padCenter = (str, max, chr) ->
  str = (if str? then str else "")
  str = String(str)
  length = max - wcwidth(str)
  return str  if length <= 0
  lengthLeft = Math.floor(length / 2)
  lengthRight = length - lengthLeft
  repeatString(chr or " ", lengthLeft) + str + repeatString(chr or " ", lengthRight)

###*
Pad `str` up to total length `max` with `chr`, on the left.
If `str` is longer than `max`, padRight will return `str` unaltered.

@param String str string to pad
@param Number max total length of output string
@param String chr optional. Character to pad with. default: ' '
@return String padded str
###
padLeft = (str, max, chr) ->
  str = (if str? then str else "")
  str = String(str)
  length = max - wcwidth(str)
  return str  if length <= 0
  repeatString(chr or " ", length) + str

###*
Split a String `str` into lines of maxiumum length `max`.
Splits on word boundaries. Preserves existing new lines.

@param String str string to split
@param Number max length of each line
@return Array Array containing lines.
###
splitIntoLines = (str, max) ->
  _splitIntoLines = (str, max) ->
    # add to line
    # new line
    str.trim().split(" ").reduce((lines, word) ->
      line = lines[lines.length - 1]
      if line and wcwidth(line.join(" ")) + wcwidth(word) < max
        lines[lines.length - 1].push word
      else
        lines.push [word]
      lines
    , []).map (l) ->
      l.join " "

  str.split("\n").map((str) ->
    _splitIntoLines str, max
  ).reduce ((lines, line) ->
    lines.concat line
  ), []

###*
Add spaces and `truncationChar` between words of
`str` which are longer than `max`.

@param String str string to split
@param Number max length of each line
@param Number truncationChar character to append to split words
@return String
###
splitLongWords = (str, max, truncationChar, result) ->
  str = str.trim()
  result = result or []
  return result.join(" ") or ""  unless str
  words = str.split(" ")
  word = words.shift() or str
  if wcwidth(word) > max
    
    # slice is based on length no wcwidth
    i = 0
    wwidth = 0
    limit = max - wcwidth(truncationChar)
    while i < word.length
      w = wcwidth(word.charAt(i))
      break  if w + wwidth > limit
      wwidth += w
      ++i
    remainder = word.slice(i) # get remainder
    words.unshift remainder # save remainder for next loop
    word = word.slice(0, i) # grab truncated word
    word += truncationChar # add trailing â€¦ or whatever
  result.push word
  splitLongWords words.join(" "), max, truncationChar, result

###*
Truncate `str` into total width `max`
If `str` is shorter than `max`,  will return `str` unaltered.

@param String str string to truncated
@param Number max total wcwidth of output string
@return String truncated str
###
truncateString = (str, max) ->
  str = (if str? then str else "")
  str = String(str)
  return str  if max is Infinity
  i = 0
  wwidth = 0
  while i < str.length
    w = wcwidth(str.charAt(i))
    break  if w + wwidth > max
    wwidth += w
    ++i
  str.slice 0, i
"use strict"
wcwidth = require("./width")

###*
Exports
###
module.exports.padRight = padRight
module.exports.padCenter = padCenter
module.exports.padLeft = padLeft
module.exports.splitIntoLines = splitIntoLines
module.exports.splitLongWords = splitLongWords
module.exports.truncateString = truncateString
