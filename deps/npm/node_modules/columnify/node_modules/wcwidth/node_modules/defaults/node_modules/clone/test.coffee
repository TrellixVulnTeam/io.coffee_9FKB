if module.parent is null
  console.log "Run this test file with nodeunit:"
  console.log "$ nodeunit test.js"
clone = require("./")
util = require("util")
_ = require("underscore")
exports["clone string"] = (test) ->
  test.expect 2 # how many tests?
  a = "foo"
  test.strictEqual clone(a), a
  a = ""
  test.strictEqual clone(a), a
  test.done()
  return

exports["clone number"] = (test) ->
  test.expect 5 # how many tests?
  a = 0
  test.strictEqual clone(a), a
  a = 1
  test.strictEqual clone(a), a
  a = -1000
  test.strictEqual clone(a), a
  a = 3.1415927
  test.strictEqual clone(a), a
  a = -3.1415927
  test.strictEqual clone(a), a
  test.done()
  return

exports["clone date"] = (test) ->
  test.expect 3 # how many tests?
  a = new Date
  c = clone(a)
  test.ok a instanceof Date
  test.ok c instanceof Date
  test.equal c.getTime(), a.getTime()
  test.done()
  return

exports["clone object"] = (test) ->
  test.expect 2 # how many tests?
  a = foo:
    bar: "baz"

  b = clone(a)
  test.ok _(a).isEqual(b), "underscore equal"
  test.deepEqual b, a
  test.done()
  return

exports["clone array"] = (test) ->
  test.expect 2 # how many tests?
  a = [
    {
      foo: "bar"
    }
    "baz"
  ]
  b = clone(a)
  test.ok _(a).isEqual(b), "underscore equal"
  test.deepEqual b, a
  test.done()
  return

exports["clone buffer"] = (test) ->
  test.expect 1
  a = new Buffer("this is a test buffer")
  b = clone(a)
  
  # no underscore equal since it has no concept of Buffers
  test.deepEqual b, a
  test.done()
  return

exports["clone regexp"] = (test) ->
  test.expect 5
  a = /abc123/g
  b = clone(a)
  test.deepEqual b, a
  c = /a/g
  test.ok c.lastIndex is 0
  c.exec "123a456a"
  test.ok c.lastIndex is 4
  d = clone(c)
  test.ok d.global
  test.ok d.lastIndex is 4
  test.done()
  return

exports["clone object containing array"] = (test) ->
  test.expect 2 # how many tests?
  a =
    arr1: [
      a: "1234"
      b: "2345"
    ]
    arr2: [
      c: "345"
      d: "456"
    ]

  b = clone(a)
  test.ok _(a).isEqual(b), "underscore equal"
  test.deepEqual b, a
  test.done()
  return

exports["clone object with circular reference"] = (test) ->
  # how many tests?
  
  #console.log(util.inspect(aCopy, true, null) );
  #console.log("------------------------------------------------------------");
  #console.log(util.inspect(a, true, null) );
  
  #console.log("------------------------------------------------------------");
  #console.log(util.inspect(aCopy, true, null) );
  eq = (x, y) ->
    util.inspect(x, true, null) is util.inspect(y, true, null)
  test.expect 8
  _ = test.ok
  c = [
    1
    "foo"
    {
      hello: "bar"
    }
    ->
    false
    [2]
  ]
  b = [
    c
    2
    3
    4
  ]
  a =
    b: b
    c: c

  a.loop = a
  a.loop2 = a
  c.loop = c
  c.aloop = a
  aCopy = clone(a)
  _ a isnt aCopy
  _ a.c isnt aCopy.c
  _ aCopy.c is aCopy.b[0]
  _ aCopy.c.loop.loop.aloop is aCopy
  _ aCopy.c[0] is a.c[0]
  _ eq(a, aCopy)
  aCopy.c[0] = 2
  _ not eq(a, aCopy)
  aCopy.c = "2"
  _ not eq(a, aCopy)
  test.done()
  return

exports["clonePrototype"] = (test) ->
  test.expect 3 # how many tests?
  a =
    a: "aaa"
    x: 123
    y: 45.65

  b = clone.clonePrototype(a)
  test.strictEqual b.a, a.a
  test.strictEqual b.x, a.x
  test.strictEqual b.y, a.y
  test.done()
  return

exports["cloneWithinNewVMContext"] = (test) ->
  test.expect 3
  vm = require("vm")
  ctx = vm.createContext(clone: clone)
  script = "clone( {array: [1, 2, 3], date: new Date(), regex: /^foo$/ig} );"
  results = vm.runInContext(script, ctx)
  test.ok results.array instanceof Array
  test.ok results.date instanceof Date
  test.ok results.regex instanceof RegExp
  test.done()
  return

exports["cloneObjectWithNoConstructor"] = (test) ->
  test.expect 3
  n = null
  a = foo: "bar"
  a.__proto__ = n
  test.ok typeof a is "object"
  test.ok typeof a isnt null
  b = clone(a)
  test.ok a.foo, b.foo
  test.done()
  return

exports["clone object with depth argument"] = (test) ->
  test.expect 6
  a = foo:
    bar:
      baz: "qux"

  b = clone(a, false, 1)
  test.deepEqual b, a
  test.notEqual b, a
  test.strictEqual b.foo, a.foo
  b = clone(a, true, 2)
  test.deepEqual b, a
  test.notEqual b.foo, a.foo
  test.strictEqual b.foo.bar, a.foo.bar
  test.done()
  return

exports["maintain prototype chain in clones"] = (test) ->
  Constructor = ->
  test.expect 1
  a = new Constructor()
  b = clone(a)
  test.strictEqual Object.getPrototypeOf(a), Object.getPrototypeOf(b)
  test.done()
  return

exports["parent prototype is overriden with prototype provided"] = (test) ->
  Constructor = ->
  test.expect 1
  a = new Constructor()
  b = clone(a, true, Infinity, null)
  test.strictEqual b.__defineSetter__, `undefined`
  test.done()
  return

exports["clone object with null children"] = (test) ->
  test.expect 1
  a = foo:
    bar: null
    baz:
      qux: false

  b = clone(a)
  test.deepEqual b, a
  test.done()
  return
