
#
# *  The following functions define the column width of an ISO 10646
# *  character as follows:
# *  - The null character (U+0000) has a column width of 0.
# *  - Other C0/C1 control characters and DEL will lead to a return value
# *    of -1.
# *  - Non-spacing and enclosing combining characters (general category
# *    code Mn or Me in the
# *    Unicode database) have a column width of 0.
# *  - SOFT HYPHEN (U+00AD) has a column width of 1.
# *  - Other format characters (general category code Cf in the Unicode
# *    database) and ZERO WIDTH
# *    SPACE (U+200B) have a column width of 0.
# *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)
# *    have a column width of 0.
# *  - Spacing characters in the East Asian Wide (W) or East Asian
# *    Full-width (F) category as
# *    defined in Unicode Technical Report #11 have a column width of 2.
# *  - All remaining characters (including all printable ISO 8859-1 and
# *    WGL4 characters, Unicode control characters, etc.) have a column
# *    width of 1.
# *  This implementation assumes that characters are encoded in ISO 10646.
#
wcswidth = (str, opts) ->
  return wcwidth(str, opts)  if typeof str isnt "string"
  s = 0
  i = 0

  while i < str.length
    n = wcwidth(str.charCodeAt(i), opts)
    return -1  if n < 0
    s += n
    i++
  s
wcwidth = (ucs, opts) ->
  
  # test for 8-bit control characters
  return opts.nul  if ucs is 0
  return opts.control  if ucs < 32 or (ucs >= 0x7f and ucs < 0xa0)
  
  # binary search in table of non-spacing characters
  return 0  if bisearch(ucs)
  
  # if we arrive here, ucs is not a combining or C0/C1 control character
  # Hangul Jamo init. consonants
  # CJK ... Yi
  # Hangul Syllables
  # CJK Compatibility Ideographs
  # Vertical forms
  # CJK Compatibility Forms
  # Fullwidth Forms
  1 + (ucs >= 0x1100 and (ucs <= 0x115f or ucs is 0x2329 or ucs is 0x232a or (ucs >= 0x2e80 and ucs <= 0xa4cf and ucs isnt 0x303f) or (ucs >= 0xac00 and ucs <= 0xd7a3) or (ucs >= 0xf900 and ucs <= 0xfaff) or (ucs >= 0xfe10 and ucs <= 0xfe19) or (ucs >= 0xfe30 and ucs <= 0xfe6f) or (ucs >= 0xff00 and ucs <= 0xff60) or (ucs >= 0xffe0 and ucs <= 0xffe6) or (ucs >= 0x20000 and ucs <= 0x2fffd) or (ucs >= 0x30000 and ucs <= 0x3fffd)))
bisearch = (ucs) ->
  min = 0
  max = combining.length - 1
  mid = undefined
  return false  if ucs < combining[0][0] or ucs > combining[max][1]
  while max >= min
    mid = Math.floor((min + max) / 2)
    if ucs > combining[mid][1]
      min = mid + 1
    else if ucs < combining[mid][0]
      max = mid - 1
    else
      return true
  false
"use strict"
defaults = require("defaults")
combining = require("./combining")
DEFAULTS =
  nul: 0
  control: 0

module.exports = wcwidth = (str) ->
  wcswidth str, DEFAULTS

module.exports.config = (opts) ->
  opts = defaults(opts or {}, DEFAULTS)
  wcwidth = (str) ->
    wcswidth str, opts
