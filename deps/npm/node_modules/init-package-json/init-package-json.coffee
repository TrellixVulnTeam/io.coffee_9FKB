
# to validate the data object at the end as a worthwhile package
# and assign default values for things.
# readJson.extras(file, data, cb)
yes = (conf) ->
  !!(conf.get("yes") or conf.get("y") or conf.get("force") or conf.get("f"))
init = (dir, input, config, cb) ->
  if typeof config is "function"
    cb = config
    config = {}
  
  # accept either a plain-jane object, or a config object
  # with a "get" method.
  if typeof config.get isnt "function"
    data = config
    config =
      get: (k) ->
        data[k]

      toJSON: ->
        data
  package_ = path.resolve(dir, "package.json")
  input = path.resolve(input)
  pkg = undefined
  ctx = yes: yes_(config)
  es = readJson.extraSet
  readJson.extraSet = es.filter((fn) ->
    fn.name isnt "authors" and fn.name isnt "mans"
  )
  readJson package_, (er, d) ->
    readJson.extraSet = es
    if er
      pkg = {}
    else
      pkg = d
    ctx.filename = package_
    ctx.dirname = path.dirname(package_)
    ctx.basename = path.basename(ctx.dirname)
    delete pkg.version  if not pkg.version or not semver.valid(pkg.version)
    ctx.package = pkg
    ctx.config = config or {}
    
    # make sure that the input is valid.
    # if not, use the default
    pz = new PZ(input, ctx)
    pz.backupFile = def
    pz.on "error", cb
    pz.on "data", (data) ->
      Object.keys(data).forEach (k) ->
        pkg[k] = data[k]  if data[k] isnt `undefined` and data[k] isnt null
        return

      
      # only do a few of these.
      # no need for mans or contributors if they're in the files
      es = readJson.extraSet
      readJson.extraSet = es.filter((fn) ->
        fn.name isnt "authors" and fn.name isnt "mans"
      )
      readJson.extras package_, pkg, (er, pkg) ->
        
        # no need for the readme now.
        
        # really don't want to have this lying around in the file
        
        # ditto
        
        # if the repo is empty, remove it.
        write = (yes_) ->
          fs.writeFile package_, d, "utf8", (er) ->
            console.log "Wrote to %s:\n\n%s\n", package_, d  if not er and yes_
            cb er, pkg

          return
        readJson.extraSet = es
        return cb(er, pkg)  if er
        pkg = unParsePeople(pkg)
        delete pkg.readme

        delete pkg.readmeFilename

        delete pkg._id

        delete pkg.gitHead

        delete pkg.repository  unless pkg.repository
        d = JSON.stringify(pkg, null, 2) + "\n"
        return write(true)  if ctx.yes
        console.log "About to write to %s:\n\n%s\n", package_, d
        read
          prompt: "Is this ok? "
          default: "yes"
        , (er, ok) ->
          if not ok or ok.toLowerCase().charAt(0) isnt "y"
            console.log "Aborted."
          else
            write()
          return

        return

      return

    return

  return

# turn the objects into somewhat more humane strings.
unParsePeople = (data) ->
  data.author = unParsePerson(data.author)  if data.author
  [
    "maintainers"
    "contributors"
  ].forEach (set) ->
    return  unless Array.isArray(data[set])
    data[set] = data[set].map(unParsePerson)
    return

  data
unParsePerson = (person) ->
  return person  if typeof person is "string"
  name = person.name or ""
  u = person.url or person.web
  url = (if u then (" (" + u + ")") else "")
  e = person.email or person.mail
  email = (if e then (" <" + e + ">") else "")
  name + email + url
module.exports = init
module.exports.yes = yes_
PZ = require("promzard").PromZard
path = require("path")
def = require.resolve("./default-input.js")
fs = require("fs")
semver = require("semver")
read = require("read")
readJson = require("read-package-json")
