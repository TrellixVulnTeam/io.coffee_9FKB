PZ = require("../../promzard").PromZard
path = require("path")
input = path.resolve(__dirname, "init-input.js")
fs = require("fs")
package_ = path.resolve(__dirname, "package.json")
pkg = undefined
fs.readFile package_, "utf8", (er, d) ->
  ctx = {}  if er
  try
    ctx = JSON.parse(d)
    pkg = JSON.parse(d)
  catch e
    ctx = {}
  ctx.dirname = path.dirname(package_)
  ctx.basename = path.basename(ctx.dirname)
  ctx.version = `undefined`  unless ctx.version
  
  # this should be replaced with the npm conf object
  ctx.config = {}
  console.error "ctx=", ctx
  pz = new PZ(input, ctx)
  pz.on "data", (data) ->
    console.error "pz data", data
    pkg = {}  unless pkg
    Object.keys(data).forEach (k) ->
      pkg[k] = data[k]  if data[k] isnt `undefined` and data[k] isnt null
      return

    console.error "package data %s", JSON.stringify(data, null, 2)
    fs.writeFile package_, JSON.stringify(pkg, null, 2), (er) ->
      throw er  if er
      console.log "ok"
      return

    return

  return

