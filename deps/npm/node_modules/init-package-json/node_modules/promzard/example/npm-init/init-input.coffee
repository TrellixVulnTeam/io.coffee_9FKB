fs = require("fs")
path = require("path")
module.exports =
  name: prompt("name", (if typeof name is "undefined" then basename.replace(/^node-|[.-]js$/g, "") else name))
  version: prompt("version", (if typeof version isnt "undefined" then version else "0.0.0"))
  description: (->
    return description  if typeof description isnt "undefined" and description
    value = undefined
    try
      src = fs.readFileSync("README.md", "utf8")
      value = src.split("\n").filter((line) ->
        /\s+/.test(line) and line.trim() isnt basename.replace(/^node-/, "") and not line.trim().match(/^#/)
      )[0].trim().replace(/^./, (c) ->
        c.toLowerCase()
      ).replace(/\.$/, "")
    catch e
      try
        
        # Wouldn't it be nice if that file mattered?
        d = fs.readFileSync(".git/description", "utf8")
      value = d  if d.trim() and not value
    prompt "description", value
  )()
  main: (->
    f = undefined
    try
      f = fs.readdirSync(dirname).filter((f) ->
        f.match /\.js$/
      )
      if f.indexOf("index.js") isnt -1
        f = "index.js"
      else if f.indexOf("main.js") isnt -1
        f = "main.js"
      else if f.indexOf(basename + ".js") isnt -1
        f = basename + ".js"
      else
        f = f[0]
    prompt "entry point", f or "index.js"
  )()
  bin: (cb) ->
    fs.readdir dirname + "/bin", (er, d) ->
      
      # no bins
      return cb()  if er
      
      # just take the first js file we find there, or nada
      cb null, d.filter((f) ->
        f.match /\.js$/
      )[0]

    return

  directories: (cb) ->
    fs.readdir ".", (er, dirs) ->
      return cb(er)  if er
      res = {}
      dirs.forEach (d) ->
        switch d
          when "example", "examples"
            res.example = d
          when "test", "tests"
            res.test = d
          when "doc", "docs"
            res.doc = d
          when "man"
            res.man = d

      res = `undefined`  if Object.keys(res).length is 0
      cb null, res

    return

  dependencies: (if typeof dependencies isnt "undefined" then dependencies else (cb) ->
    fs.readdir "node_modules", (er, dir) ->
      next = ->
        cb null, deps  if --n is 0
      return cb()  if er
      deps = {}
      n = dir.length
      dir.forEach (d) ->
        return next()  if d.match(/^\./)
        return next()  if d.match(/^(expresso|mocha|tap|coffee-script|coco|streamline)$/)
        fs.readFile "node_modules/" + d + "/package.json", (er, p) ->
          return next()  if er
          try
            p = JSON.parse(p)
          catch e
            return next()
          return next()  unless p.version
          deps[d] = "~" + p.version
          next()

        return

      return

    return
  )
  devDependencies: (if typeof devDependencies isnt "undefined" then devDependencies else (cb) ->
    
    # same as dependencies but for dev deps
    fs.readdir "node_modules", (er, dir) ->
      next = ->
        cb null, deps  if --n is 0
      return cb()  if er
      deps = {}
      n = dir.length
      dir.forEach (d) ->
        return next()  if d.match(/^\./)
        return next()  unless d.match(/^(expresso|mocha|tap|coffee-script|coco|streamline)$/)
        fs.readFile "node_modules/" + d + "/package.json", (er, p) ->
          return next()  if er
          try
            p = JSON.parse(p)
          catch e
            return next()
          return next()  unless p.version
          deps[d] = "~" + p.version
          next()

        return

      return

    return
  )
  scripts: (->
    
    # check to see what framework is in use, if any
    tx = (test) ->
      test or notest
    try
      d = fs.readdirSync("node_modules")
    catch e
      d = []
    s = (if typeof scripts is "undefined" then {} else scripts)
    s.prepublish = prompt("build command", s.prepublish or "coffee src/*.coffee -o lib")  if d.indexOf("coffee-script") isnt -1
    notest = "echo \"Error: no test specified\" && exit 1"
    if not s.test or s.test is notest
      if d.indexOf("tap") isnt -1
        s.test = prompt("test command", "tap test/*.js", tx)
      else if d.indexOf("expresso") isnt -1
        s.test = prompt("test command", "expresso test", tx)
      else if d.indexOf("mocha") isnt -1
        s.test = prompt("test command", "mocha", tx)
      else
        s.test = prompt("test command", tx)
    s
  )()
  repository: (->
    try
      gconf = fs.readFileSync(".git/config")
    catch e
      gconf = null
    if gconf
      gconf = gconf.split(/\r?\n/)
      i = gconf.indexOf("[remote \"origin\"]")
      if i isnt -1
        u = gconf[i + 1]
        u = gconf[i + 2]  unless u.match(/^\s*url =/)
        unless u.match(/^\s*url =/)
          u = null
        else
          u = u.replace(/^\s*url = /, "")
      u = u.replace(/^git@github.com:/, "git://github.com/")  if u and u.match(/^git@github.com:/)
    prompt "git repository", u
  )()
  keywords: prompt((s) ->
    return `undefined`  unless s
    s = s.join(" ")  if Array.isArray(s)
    return s  if typeof s isnt "string"
    s.split /[\s,]+/
  )
  author: (if config["init.author.name"] then
    name: config["init.author.name"]
    email: config["init.author.email"]
    url: config["init.author.url"]
   else `undefined`)
  license: prompt("license", "BSD")
