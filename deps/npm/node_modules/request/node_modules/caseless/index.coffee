Caseless = (dict) ->
  @dict = dict
  return
Caseless::set = (name, value, clobber) ->
  if typeof name is "object"
    for i of name
      @set i, name[i], value
  else
    clobber = true  if typeof clobber is "undefined"
    has = @has(name)
    if not clobber and has
      @dict[has] = @dict[has] + "," + value
    else
      @dict[has or name] = value
    has
  return

Caseless::has = (name) ->
  keys = Object.keys(@dict)
  name = name.toLowerCase()
  i = 0

  while i < keys.length
    return keys[i]  if keys[i].toLowerCase() is name
    i++
  false

Caseless::get = (name) ->
  result = undefined
  re = undefined
  match = undefined
  headers = @dict
  Object.keys(headers).forEach (key) ->
    re = new RegExp(name, "i")
    match = key.match(re)
    result = headers[key]  if match
    return

  result

Caseless::swap = (name) ->
  has = @has(name)
  throw new Error("There is no header than matches \"" + name + "\"")  unless has
  @dict[name] = @dict[has]
  delete @dict[has]

  return

Caseless::del = (name) ->
  has = @has(name)
  delete @dict[has or name]

module.exports = (dict) ->
  new Caseless(dict)

module.exports.httpify = (resp, headers) ->
  c = new Caseless(headers)
  resp.setHeader = (key, value, clobber) ->
    c.set key, value, clobber

  resp.hasHeader = (key) ->
    c.has key

  resp.getHeader = (key) ->
    c.get key

  resp.removeHeader = (key) ->
    c.del key

  resp.headers = c.dict
  c
