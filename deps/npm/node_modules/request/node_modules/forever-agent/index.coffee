ForeverAgent = (options) ->
  self = this
  self.options = options or {}
  self.requests = {}
  self.sockets = {}
  self.freeSockets = {}
  self.maxSockets = self.options.maxSockets or Agent.defaultMaxSockets
  self.minSockets = self.options.minSockets or ForeverAgent.defaultMinSockets
  self.on "free", (socket, host, port) ->
    name = host + ":" + port
    if self.requests[name] and self.requests[name].length
      self.requests[name].shift().onSocket socket
    else if self.sockets[name].length < self.minSockets
      self.freeSockets[name] = []  unless self.freeSockets[name]
      self.freeSockets[name].push socket
      
      # if an error happens while we don't use the socket anyway, meh, throw the socket away
      onIdleError = ->
        socket.destroy()
        return

      socket._onIdleError = onIdleError
      socket.on "error", onIdleError
    else
      
      # If there are no pending requests just destroy the
      # socket and it will get removed from the pool. This
      # gets us out of timeout issues and allows us to
      # default to Connection:keep-alive.
      socket.destroy()
    return

  return

# don't leak

# If we have pending requests and a socket gets closed a new one
# needs to be created to take over in the pool for the one that closed.
ForeverAgentSSL = (options) ->
  ForeverAgent.call this, options
  return
createConnectionSSL = (port, host, options) ->
  if typeof port is "object"
    options = port
  else if typeof host is "object"
    options = host
  else if typeof options is "object"
    options = options
  else
    options = {}
  options.port = port  if typeof port is "number"
  options.host = host  if typeof host is "string"
  tls.connect options
module.exports = ForeverAgent
ForeverAgent.SSL = ForeverAgentSSL
util = require("util")
Agent = require("http").Agent
net = require("net")
tls = require("tls")
AgentSSL = require("https").Agent
util.inherits ForeverAgent, Agent
ForeverAgent.defaultMinSockets = 5
ForeverAgent::createConnection = net.createConnection
ForeverAgent::addRequestNoreuse = Agent::addRequest
ForeverAgent::addRequest = (req, host, port) ->
  name = host + ":" + port
  if @freeSockets[name] and @freeSockets[name].length > 0 and not req.useChunkedEncodingByDefault
    idleSocket = @freeSockets[name].pop()
    idleSocket.removeListener "error", idleSocket._onIdleError
    delete idleSocket._onIdleError

    req._reusedSocket = true
    req.onSocket idleSocket
  else
    @addRequestNoreuse req, host, port
  return

ForeverAgent::removeSocket = (s, name, host, port) ->
  if @sockets[name]
    index = @sockets[name].indexOf(s)
    @sockets[name].splice index, 1  if index isnt -1
  else if @sockets[name] and @sockets[name].length is 0
    delete @sockets[name]

    delete @requests[name]
  if @freeSockets[name]
    index = @freeSockets[name].indexOf(s)
    if index isnt -1
      @freeSockets[name].splice index, 1
      delete @freeSockets[name]  if @freeSockets[name].length is 0
  @createSocket(name, host, port).emit "free"  if @requests[name] and @requests[name].length
  return

util.inherits ForeverAgentSSL, ForeverAgent
ForeverAgentSSL::createConnection = createConnectionSSL
ForeverAgentSSL::addRequestNoreuse = AgentSSL::addRequest
