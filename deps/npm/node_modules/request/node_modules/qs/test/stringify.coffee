# Load modules
Lab = require("lab")
Qs = require("../")

# Declare internals
internals = {}

# Test shortcuts
expect = Lab.expect
before = Lab.before
after = Lab.after
describe = Lab.experiment
it = Lab.test
describe "#stringify", ->
  it "stringifies a querystring object", (done) ->
    expect(Qs.stringify(a: "b")).to.equal "a=b"
    expect(Qs.stringify(a: 1)).to.equal "a=1"
    expect(Qs.stringify(
      a: 1
      b: 2
    )).to.equal "a=1&b=2"
    done()
    return

  it "stringifies a nested object", (done) ->
    expect(Qs.stringify(a:
      b: "c"
    )).to.equal "a%5Bb%5D=c"
    expect(Qs.stringify(a:
      b:
        c:
          d: "e"
    )).to.equal "a%5Bb%5D%5Bc%5D%5Bd%5D=e"
    done()
    return

  it "stringifies an array value", (done) ->
    expect(Qs.stringify(a: [
      "b"
      "c"
      "d"
    ])).to.equal "a%5B0%5D=b&a%5B1%5D=c&a%5B2%5D=d"
    done()
    return

  it "stringifies a nested array value", (done) ->
    expect(Qs.stringify(a:
      b: [
        "c"
        "d"
      ]
    )).to.equal "a%5Bb%5D%5B0%5D=c&a%5Bb%5D%5B1%5D=d"
    done()
    return

  it "stringifies an object inside an array", (done) ->
    expect(Qs.stringify(a: [b: "c"])).to.equal "a%5B0%5D%5Bb%5D=c"
    expect(Qs.stringify(a: [b:
      c: [1]
    ])).to.equal "a%5B0%5D%5Bb%5D%5Bc%5D%5B0%5D=1"
    done()
    return

  it "stringifies a complicated object", (done) ->
    expect(Qs.stringify(a:
      b: "c"
      d: "e"
    )).to.equal "a%5Bb%5D=c&a%5Bd%5D=e"
    done()
    return

  it "stringifies an empty value", (done) ->
    expect(Qs.stringify(a: "")).to.equal "a="
    expect(Qs.stringify(
      a: ""
      b: ""
    )).to.equal "a=&b="
    expect(Qs.stringify(a: null)).to.equal "a="
    expect(Qs.stringify(a:
      b: null
    )).to.equal "a%5Bb%5D="
    done()
    return

  it "drops keys with a value of undefined", (done) ->
    expect(Qs.stringify(a: `undefined`)).to.equal ""
    expect(Qs.stringify(a:
      b: `undefined`
      c: null
    )).to.equal "a%5Bc%5D="
    done()
    return

  it "url encodes values", (done) ->
    expect(Qs.stringify(a: "b c")).to.equal "a=b%20c"
    done()
    return

  it "stringifies a date", (done) ->
    now = new Date()
    str = "a=" + encodeURIComponent(now.toISOString())
    expect(Qs.stringify(a: now)).to.equal str
    done()
    return

  it "stringifies the weird object from qs", (done) ->
    expect(Qs.stringify("my weird field": "q1!2\"'w$5&7/z8)?")).to.equal "my%20weird%20field=q1!2%22'w%245%267%2Fz8)%3F"
    done()
    return

  it "skips properties that are part of the object prototype", (done) ->
    Object::crash = "test"
    expect(Qs.stringify(a: "b")).to.equal "a=b"
    expect(Qs.stringify(a:
      b: "c"
    )).to.equal "a%5Bb%5D=c"
    delete Object::crash

    done()
    return

  it "stringifies boolean values", (done) ->
    expect(Qs.stringify(a: true)).to.equal "a=true"
    expect(Qs.stringify(a:
      b: true
    )).to.equal "a%5Bb%5D=true"
    expect(Qs.stringify(b: false)).to.equal "b=false"
    expect(Qs.stringify(b:
      c: false
    )).to.equal "b%5Bc%5D=false"
    done()
    return

  it "stringifies buffer values", (done) ->
    expect(Qs.stringify(a: new Buffer("test"))).to.equal "a=test"
    expect(Qs.stringify(a:
      b: new Buffer("test")
    )).to.equal "a%5Bb%5D=test"
    done()
    return

  it "stringifies an object using an alternative delimiter", (done) ->
    expect(Qs.stringify(
      a: "b"
      c: "d"
    , ";")).to.equal "a=b;c=d"
    done()
    return

  return

