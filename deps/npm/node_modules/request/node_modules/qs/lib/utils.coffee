# Load modules

# Declare internals
internals = {}
exports.arrayToObject = (source) ->
  obj = {}
  i = 0
  il = source.length

  while i < il
    obj[i] = source[i]  if typeof source[i] isnt "undefined"
    ++i
  obj

exports.clone = (source) ->
  return source  if typeof source isnt "object" or source is null
  return source.toString()  if Buffer.isBuffer(source)
  obj = (if Array.isArray(source) then [] else {})
  for i of source
    obj[i] = exports.clone(source[i])  if source.hasOwnProperty(i)
  obj

exports.merge = (target, source) ->
  return target  unless source
  obj = exports.clone(target)
  if Array.isArray(source)
    i = 0
    il = source.length

    while i < il
      if typeof source[i] isnt "undefined"
        if typeof obj[i] is "object"
          obj[i] = exports.merge(obj[i], source[i])
        else
          obj[i] = source[i]
      ++i
    return obj
  obj = exports.arrayToObject(obj)  if Array.isArray(obj)
  keys = Object.keys(source)
  k = 0
  kl = keys.length

  while k < kl
    key = keys[k]
    value = source[key]
    if value and typeof value is "object"
      unless obj[key]
        obj[key] = exports.clone(value)
      else
        obj[key] = exports.merge(obj[key], value)
    else
      obj[key] = value
    ++k
  obj

exports.decode = (str) ->
  try
    return decodeURIComponent(str.replace(/\+/g, " "))
  catch e
    return str
  return

exports.compact = (obj) ->
  return obj  if typeof obj isnt "object" or obj is null
  compacted = {}
  for key of obj
    if obj.hasOwnProperty(key)
      if Array.isArray(obj[key])
        compacted[key] = []
        i = 0
        l = obj[key].length

        while i < l
          compacted[key].push obj[key][i]  if typeof obj[key][i] isnt "undefined"
          i++
      else
        compacted[key] = exports.compact(obj[key])
  compacted
