
# types[extension] = type

# extensions[type] = [extensions]

# define more mime types

# store the json files

# type has to be an exact mime type

# special cases

# default text/* to utf-8

# backwards compatibility
define = (json) ->
  Object.keys(json).forEach (type) ->
    exts = json[type] or []
    exports.extensions[type] = exports.extensions[type] or []
    exts.forEach (ext) ->
      exports.extensions[type].push ext  unless ~exports.extensions[type].indexOf(ext)
      exports.types[ext] = type
      return

    return

  return
exports.types = Object.create(null)
exports.extensions = Object.create(null)
exports.define = define
exports.json =
  mime: require("./mime.json")
  node: require("./node.json")
  custom: require("./custom.json")

exports.lookup = (string) ->
  return false  if not string or typeof string isnt "string"
  string = string.replace(/.*[\.\/\\]/, "").toLowerCase()
  return false  unless string
  exports.types[string] or false

exports.extension = (type) ->
  return false  if not type or typeof type isnt "string"
  type = type.match(/^\s*([^;\s]*)(?:;|\s|$)/)
  return false  unless type
  exts = exports.extensions[type[1].toLowerCase()]
  return false  if not exts or not exts.length
  exts[0]

exports.charset = (type) ->
  switch type
    when "application/json"
      return "UTF-8"
    when "application/javascript"
      return "UTF-8"
  return "UTF-8"  if /^text\//.test(type)
  false

exports.charsets = lookup: exports.charset
exports.contentType = (type) ->
  return false  if not type or typeof type isnt "string"
  type = exports.lookup(type)  unless ~type.indexOf("/")
  return false  unless type
  unless ~type.indexOf("charset")
    charset = exports.charset(type)
    type += "; charset=" + charset.toLowerCase()  if charset
  type

define exports.json.mime
define exports.json.node
define exports.json.custom
