Mime = ->
  
  # Map of extension -> mime type
  @types = Object.create(null)
  
  # Map of mime type -> extension
  @extensions = Object.create(null)
  return
path = require("path")
fs = require("fs")

###*
Define mimetype -> extension mappings.  Each key is a mime-type that maps
to an array of extensions associated with the type.  The first extension is
used as the default extension for the type.

e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});

@param map (Object) type definitions
###
Mime::define = (map) ->
  for type of map
    exts = map[type]
    i = 0

    while i < exts.length
      console.warn @_loading.replace(/.*\//, ""), "changes \"" + exts[i] + "\" extension type from " + @types[exts] + " to " + type  if process.env.DEBUG_MIME and @types[exts]
      @types[exts[i]] = type
      i++
    
    # Default extension is the first one we encounter
    @extensions[type] = exts[0]  unless @extensions[type]
  return


###*
Load an Apache2-style ".types" file

This may be called multiple times (it's expected).  Where files declare
overlapping types/extensions, the last file wins.

@param file (String) path of file to load.
###
Mime::load = (file) ->
  @_loading = file
  
  # Read file and split into lines
  map = {}
  content = fs.readFileSync(file, "ascii")
  lines = content.split(/[\r\n]+/)
  lines.forEach (line) ->
    
    # Clean up whitespace/comments, and split into fields
    fields = line.replace(/\s*#.*|^\s*|\s*$/g, "").split(/\s+/)
    map[fields.shift()] = fields
    return

  @define map
  @_loading = null
  return


###*
Lookup a mime type based on extension
###
Mime::lookup = (path, fallback) ->
  ext = path.replace(/.*[\.\/\\]/, "").toLowerCase()
  @types[ext] or fallback or @default_type


###*
Return file extension associated with a mime type
###
Mime::extension = (mimeType) ->
  type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase()
  @extensions[type]


# Default instance
mime = new Mime()

# Load local copy of
# http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
mime.load path.join(__dirname, "types/mime.types")

# Load additional types from node.js community
mime.load path.join(__dirname, "types/node.types")

# Default type
mime.default_type = mime.lookup("bin")

#
# Additional API specific to the default instance
#
mime.Mime = Mime

###*
Lookup a charset based on mime type.
###
mime.charsets = lookup: (mimeType, fallback) ->
  
  # Assume text types are utf8
  (if (/^text\//).test(mimeType) then "UTF-8" else fallback)

module.exports = mime
