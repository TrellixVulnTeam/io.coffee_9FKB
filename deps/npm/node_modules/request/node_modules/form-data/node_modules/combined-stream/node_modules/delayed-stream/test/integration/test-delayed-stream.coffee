common = require("../common")
assert = common.assert
fake = common.fake.create()
DelayedStream = common.DelayedStream
Stream = require("stream").Stream
(testDelayEventsUntilResume = ->
  source = new Stream()
  delayedStream = DelayedStream.create(source,
    pauseStream: false
  )
  
  # delayedStream must not emit until we resume
  fake.expect delayedStream, "emit", 0
  
  # but our original source must emit
  params = []
  source.on "foo", (param) ->
    params.push param
    return

  source.emit "foo", 1
  source.emit "foo", 2
  
  # Make sure delayedStream did not emit, and source did
  assert.deepEqual params, [
    1
    2
  ]
  fake.verify()
  
  # After resume, delayedStream must playback all events
  fake.stub(delayedStream, "emit").times(Infinity).withArg 1, "newListener"
  fake.expect delayedStream, "emit", [
    "foo"
    1
  ]
  fake.expect delayedStream, "emit", [
    "foo"
    2
  ]
  fake.expect source, "resume"
  delayedStream.resume()
  fake.verify()
  
  # Calling resume again will delegate to source
  fake.expect source, "resume"
  delayedStream.resume()
  fake.verify()
  
  # Emitting more events directly leads to them being emitted
  fake.expect delayedStream, "emit", [
    "foo"
    3
  ]
  source.emit "foo", 3
  fake.verify()
  return
)()
