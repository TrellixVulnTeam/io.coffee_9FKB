
#////////
# default

#//////
# prune
prune = (k, v) ->

#/////////
# re-cycle
# (throws)
recycle = (k, v) ->
  v

#//////
# fancy
signer = (key, value) ->
  ret = key + "{"
  f = false
  for i of value
    ret += ","  if f
    f = true
    ret += i + ":"
    v = value[i]
    switch typeof v
      when "object"
        unless v
          ret += "null"
        else if Array.isArray(v)
          ret += "Array"
        else
          ret += v.constructor and v.constructor.name or "Object"
      else
        ret += typeof v
  ret += "}"
  ret
stringify = require("./stringify.js")
circularObj = a: "b"
circularObj.circularRef = circularObj
circularObj.list = [
  circularObj
  circularObj
]
testObj =
  a: "b"
  circularRef: "[Circular ~]"
  list: [
    "[Circular ~]"
    "[Circular ~]"
  ]

assert = require("assert")
assert.equal JSON.stringify(testObj, null, 2), stringify(circularObj, null, 2)
assert.equal JSON.stringify(testObj, null, 2), JSON.stringify(circularObj, stringify.getSerialize(), 2)
testObj =
  a: "b"
  list: [
    null
    null
  ]

assert.equal JSON.stringify(testObj, null, 2), stringify(circularObj, null, 2, prune)
assert.throws ->
  stringify circularObj, null, 2, recycle
  return

testObj =
  a: "b"
  circularRef: "circularRef{a:string,circularRef:Object,list:Array}"
  list: [
    "0{a:string,circularRef:Object,list:Array}"
    "1{a:string,circularRef:Object,list:Array}"
  ]

assert.equal JSON.stringify(testObj, null, 2), stringify(circularObj, null, 2, signer)

#/////
#multi
a = x: 1
a.a = a
b = x: 2
b.a = a
c =
  a: a
  b: b

d = list: [
  a
  b
  c
]
d.d = d
multi =
  list: [
    {
      x: 1
      a: "[Circular ~.list.0]"
    }
    {
      x: 2
      a: "[Circular ~.list.0]"
    }
    {
      a: "[Circular ~.list.0]"
      b: "[Circular ~.list.1]"
    }
  ]
  d: "[Circular ~]"

assert.equal JSON.stringify(multi, null, 2), stringify(d, null, 2)

#//////
# pass!
console.log "ok"
