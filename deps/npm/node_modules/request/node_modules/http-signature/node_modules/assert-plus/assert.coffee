# Copyright (c) 2012, Mark Cavage. All rights reserved.

#/--- Globals

#/--- Messages

#/--- Internal
capitalize = (str) ->
  str.charAt(0).toUpperCase() + str.slice(1)
uncapitalize = (str) ->
  str.charAt(0).toLowerCase() + str.slice(1)
_ = ->
  util.format.apply util, arguments
_assert = (arg, type, name, stackFunc) ->
  unless NDEBUG
    name = name or type
    stackFunc = stackFunc or _assert.caller
    t = typeof (arg)
    if t isnt type
      throw new assert.AssertionError(
        message: _(TYPE_REQUIRED, name, type)
        actual: t
        expected: type
        operator: "==="
        stackStartFunction: stackFunc
      )
  return

#/--- API
array = (arr, type, name) ->
  unless NDEBUG
    name = name or type
    unless Array.isArray(arr)
      throw new assert.AssertionError(
        message: _(ARRAY_TYPE_REQUIRED, name, type)
        actual: typeof (arr)
        expected: "array"
        operator: "Array.isArray"
        stackStartFunction: array.caller
      )
    i = 0

    while i < arr.length
      _assert arr[i], type, name, array
      i++
  return
bool = (arg, name) ->
  _assert arg, "boolean", name, bool
  return
buffer = (arg, name) ->
  unless Buffer.isBuffer(arg)
    throw new assert.AssertionError(
      message: _(TYPE_REQUIRED, name, type)
      actual: typeof (arg)
      expected: "buffer"
      operator: "Buffer.isBuffer"
      stackStartFunction: buffer
    )
  return
func = (arg, name) ->
  _assert arg, "function", name
  return
number = (arg, name) ->
  _assert arg, "number", name
  return
object = (arg, name) ->
  _assert arg, "object", name
  return
stream = (arg, name) ->
  unless arg instanceof Stream
    throw new assert.AssertionError(
      message: _(TYPE_REQUIRED, name, type)
      actual: typeof (arg)
      expected: "Stream"
      operator: "instanceof"
      stackStartFunction: buffer
    )
  return
string = (arg, name) ->
  _assert arg, "string", name
  return
assert = require("assert")
Stream = require("stream").Stream
util = require("util")
NDEBUG = process.env.NODE_NDEBUG or false
ARRAY_TYPE_REQUIRED = "%s ([%s]) required"
TYPE_REQUIRED = "%s (%s) is required"

#/--- Exports
module.exports =
  bool: bool
  buffer: buffer
  func: func
  number: number
  object: object
  stream: stream
  string: string

Object.keys(module.exports).forEach (k) ->
  return  if k is "buffer"
  name = "arrayOf" + capitalize(k)
  k = "boolean"  if k is "bool"
  k = "function"  if k is "func"
  module.exports[name] = (arg, name) ->
    array arg, k, name
    return

  return

Object.keys(module.exports).forEach (k) ->
  _name = "optional" + capitalize(k)
  s = uncapitalize(k.replace("arrayOf", ""))
  s = "boolean"  if s is "bool"
  s = "function"  if s is "func"
  if k.indexOf("arrayOf") isnt -1
    module.exports[_name] = (arg, name) ->
      array arg, s, name  if not NDEBUG and arg isnt `undefined`
      return
  else
    module.exports[_name] = (arg, name) ->
      _assert arg, s, name  if not NDEBUG and arg isnt `undefined`
      return
  return


# Reexport built-in assertions
Object.keys(assert).forEach (k) ->
  if k is "AssertionError"
    module.exports[k] = assert[k]
    return
  module.exports[k] = ->
    assert[k].apply assert[k], arguments  unless NDEBUG
    return

  return

