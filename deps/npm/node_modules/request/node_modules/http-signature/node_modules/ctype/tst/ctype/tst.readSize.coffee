#
# * Testing to ensure we're reading the expected number bytes
# 
testUint8 = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("80", "hex")
  result = parser.readStruct([item:
    type: "uint8_t"
  ], buffer, 0)
  ASSERT.equal result["size"], 1
  return
testSint8 = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("80", "hex")
  result = parser.readStruct([item:
    type: "int8_t"
  ], buffer, 0)
  ASSERT.equal result["size"], 1
  return
testUint16 = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("8000", "hex")
  result = parser.readStruct([item:
    type: "uint16_t"
  ], buffer, 0)
  ASSERT.equal result["size"], 2
  return
testSint16 = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("8000", "hex")
  result = parser.readStruct([item:
    type: "int16_t"
  ], buffer, 0)
  ASSERT.equal result["size"], 2
  return
testUint32 = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("80000000", "hex")
  result = parser.readStruct([item:
    type: "uint32_t"
  ], buffer, 0)
  ASSERT.equal result["size"], 4
  return
testSint32 = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("80000000", "hex")
  result = parser.readStruct([item:
    type: "int32_t"
  ], buffer, 0)
  ASSERT.equal result["size"], 4
  return
testUint64 = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("8000000000000000", "hex")
  result = parser.readStruct([item:
    type: "uint64_t"
  ], buffer, 0)
  ASSERT.equal result["size"], 8
  return
testSint64 = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("8000000000000000", "hex")
  result = parser.readStruct([item:
    type: "int64_t"
  ], buffer, 0)
  ASSERT.equal result["size"], 8
  return
testFloat = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("ABAAAA3E", "hex")
  result = parser.readStruct([item:
    type: "float"
  ], buffer, 0)
  ASSERT.equal result["size"], 4
  return
testDouble = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("000000000000F03F", "hex")
  result = parser.readStruct([item:
    type: "double"
  ], buffer, 0)
  ASSERT.equal result["size"], 8
  return
testChar = ->
  parser = undefined
  result = undefined
  buffer = undefined
  parser = new mod_ctype.Parser(endian: "little")
  buffer = new Buffer("t")
  result = parser.readStruct([item:
    type: "char"
  ], buffer, 0)
  ASSERT.equal result["size"], 1
  return
test = ->
  testSint8()
  testUint8()
  testSint16()
  testUint16()
  testSint32()
  testUint32()
  testSint64()
  testUint64()
  testFloat()
  testDouble()
  testChar()
  return
mod_ctype = require("../../ctype")
ASSERT = require("assert")
test()
