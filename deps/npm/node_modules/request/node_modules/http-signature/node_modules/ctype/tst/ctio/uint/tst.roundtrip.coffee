#
# * A battery of tests for sucessful round-trip between writes and reads
# 

#
# * What the heck, let's just test every value for 8-bits.
# 
test8 = ->
  data = new Buffer(1)
  i = undefined
  i = 0
  while i < 256
    mod_ctype.wuint8 i, "big", data, 0
    ASSERT.equal i, mod_ctype.ruint8(data, "big", 0)
    mod_ctype.wuint8 i, "little", data, 0
    ASSERT.equal i, mod_ctype.ruint8(data, "little", 0)
    i++
  ASSERT.ok true
  return

#
# * Test a random sample of 256 values in the 16-bit unsigned range
# 
test16 = ->
  data = new Buffer(2)
  i = 0
  i = 0
  while i < 256
    value = Math.round(Math.random() * Math.pow(2, 16))
    mod_ctype.wuint16 value, "big", data, 0
    ASSERT.equal value, mod_ctype.ruint16(data, "big", 0)
    mod_ctype.wuint16 value, "little", data, 0
    ASSERT.equal value, mod_ctype.ruint16(data, "little", 0)
    i++
  return

#
# * Test a random sample of 256 values in the 32-bit unsigned range
# 
test32 = ->
  data = new Buffer(4)
  i = 0
  i = 0
  while i < 256
    value = Math.round(Math.random() * Math.pow(2, 32))
    mod_ctype.wuint32 value, "big", data, 0
    ASSERT.equal value, mod_ctype.ruint32(data, "big", 0)
    mod_ctype.wuint32 value, "little", data, 0
    ASSERT.equal value, mod_ctype.ruint32(data, "little", 0)
    i++
  return

#
# * Test a random sample of 256 values in the 64-bit unsigned range
# 
test64 = ->
  data = new Buffer(8)
  i = 0
  i = 0
  while i < 256
    low = Math.round(Math.random() * Math.pow(2, 32))
    high = Math.round(Math.random() * Math.pow(2, 32))
    mod_ctype.wuint64 [
      high
      low
    ], "big", data, 0
    result = mod_ctype.ruint64(data, "big", 0)
    ASSERT.equal high, result[0]
    ASSERT.equal low, result[1]
    mod_ctype.wuint64 [
      high
      low
    ], "little", data, 0
    result = mod_ctype.ruint64(data, "little", 0)
    ASSERT.equal high, result[0]
    ASSERT.equal low, result[1]
    i++
  return
mod_ctype = require("../../../ctio.js")
ASSERT = require("assert")
exports.test8 = test8
exports.test16 = test16
exports.test32 = test32
exports.test64 = test64
