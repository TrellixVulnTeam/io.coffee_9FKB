# Copyright 2011 Joyent, Inc.  All rights reserved.
assert = require("assert-plus")
crypto = require("crypto")

#/--- Exported API

###*
Simply wraps up the node crypto operations for you, and returns
true or false.  You are expected to pass in an object that was
returned from `parse()`.

@param {Object} parsedSignature the object you got from `parse`.
@param {String} key either an RSA private key PEM or HMAC secret.
@return {Boolean} true if valid, false otherwise.
@throws {TypeError} if you pass in bad arguments.
###
module.exports = verifySignature: verifySignature = (parsedSignature, key) ->
  assert.object parsedSignature, "parsedSignature"
  assert.string key, "key"
  alg = parsedSignature.algorithm.match(/(HMAC|RSA|DSA)-(\w+)/)
  throw new TypeError("parsedSignature: unsupported algorithm " + parsedSignature.algorithm)  if not alg or alg.length isnt 3
  if alg[1] is "HMAC"
    hmac = crypto.createHmac(alg[2].toUpperCase(), key)
    hmac.update parsedSignature.signingString
    hmac.digest("base64") is parsedSignature.params.signature
  else
    verify = crypto.createVerify(alg[0])
    verify.update parsedSignature.signingString
    verify.verify key, parsedSignature.params.signature, "base64"
