
# On Mac Os X / macports there's only the ossp-uuid package that provides uuid
# On Linux there's uuid-runtime which provides uuidgen
compare = (ids) ->
  console.log ids
  i = 0

  while i < ids.length
    id = ids[i].split("-")
    id = [
      id[2]
      id[1]
      id[0]
    ].join("")
    ids[i] = id
    i++
  sorted = ([].concat(ids)).sort()
  if sorted.toString() isnt ids.toString()
    console.log "Warning: sorted !== ids"
  else
    console.log "everything in order!"
  return
assert = require("assert")
nodeuuid = require("../uuid")
uuidjs = require("uuid-js")
libuuid = require("uuid").generate
util = require("util")
exec = require("child_process").exec
os = require("os")
uuidCmd = (if os.type() is "Darwin" then "uuid -1" else "uuidgen -t")

# Test time order of v1 uuids
ids = []
ids.push nodeuuid.v1()  while ids.length < 10e3
max = 10
console.log "node-uuid:"
ids = []
i = 0

while i < max
  ids.push nodeuuid.v1()
  i++
compare ids
console.log ""
console.log "uuidjs:"
ids = []
i = 0

while i < max
  ids.push uuidjs.create(1).toString()
  i++
compare ids
console.log ""
console.log "libuuid:"
ids = []
count = 0
last = ->
  compare ids
  return

cb = (err, stdout, stderr) ->
  ids.push stdout.substring(0, stdout.length - 1)
  count++
  return next()  if count < max
  last()
  return

next = ->
  exec uuidCmd, cb
  return

next()
