sha1 = (key, body) ->
  crypto.createHmac("sha1", key).update(body).digest "base64"
rfc3986 = (str) ->
  encodeURIComponent(str).replace(/!/g, "%21").replace(/\*/g, "%2A").replace(/\(/g, "%28").replace(/\)/g, "%29").replace /'/g, "%27"

# Maps object to bi-dimensional array
# Converts { foo: 'A', bar: [ 'b', 'B' ]} to
# [ ['foo', 'A'], ['bar', 'b'], ['bar', 'B'] ]
map = (obj) ->
  key = undefined
  val = undefined
  arr = []
  for key of obj
    val = obj[key]
    if Array.isArray(val)
      i = 0

      while i < val.length
        arr.push [
          key
          val[i]
        ]
        i++
    else
      arr.push [
        key
        val
      ]
  arr

# Compare function for sort
compare = (a, b) ->
  (if a > b then 1 else (if a < b then -1 else 0))
hmacsign = (httpMethod, base_uri, params, consumer_secret, token_secret) ->
  
  # adapted from https://dev.twitter.com/docs/auth/oauth and 
  # https://dev.twitter.com/docs/auth/creating-signature
  
  # Parameter normalization
  # http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2
  
  # 1.  First, the name and value of each parameter are encoded
  
  # 2.  The parameters are sorted by name, using ascending byte value
  #     ordering.  If two or more parameters share the same name, they
  #     are sorted by their value.
  
  # 3.  The name of each parameter is concatenated to its corresponding
  #     value using an "=" character (ASCII code 61) as a separator, even
  #     if the value is empty.
  
  # 4.  The sorted name/value pairs are concatenated together into a
  #     single string by using an "&" character (ASCII code 38) as
  #     separator.
  normalized = map(params).map((p) ->
    [
      rfc3986(p[0])
      rfc3986(p[1] or "")
    ]
  ).sort((a, b) ->
    compare(a[0], b[0]) or compare(a[1], b[1])
  ).map((p) ->
    p.join "="
  ).join("&")
  base = [
    rfc3986((if httpMethod then httpMethod.toUpperCase() else "GET"))
    rfc3986(base_uri)
    rfc3986(normalized)
  ].join("&")
  key = [
    consumer_secret or ""
    token_secret or ""
  ].map(rfc3986).join("&")
  sha1 key, base
crypto = require("crypto")
qs = require("querystring")
exports.hmacsign = hmacsign
exports.rfc3986 = rfc3986
