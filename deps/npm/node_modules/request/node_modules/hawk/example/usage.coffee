# Load modules
Http = require("http")
Request = require("request")
Hawk = require("../lib")

# Declare internals
internals = credentials:
  dh37fgj492je:
    id: "dh37fgj492je" # Required by Hawk.client.header
    key: "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn"
    algorithm: "sha256"
    user: "Steve"


# Credentials lookup function
credentialsFunc = (id, callback) ->
  callback null, internals.credentials[id]


# Create HTTP server
handler = (req, res) ->
  Hawk.server.authenticate req, credentialsFunc, {}, (err, credentials, artifacts) ->
    payload = ((if not err then "Hello " + credentials.user + " " + artifacts.ext else "Shoosh!"))
    headers =
      "Content-Type": "text/plain"
      "Server-Authorization": Hawk.server.header(credentials, artifacts,
        payload: payload
        contentType: "text/plain"
      )

    res.writeHead (if not err then 200 else 401), headers
    res.end payload
    return

  return

Http.createServer(handler).listen 8000, "127.0.0.1"

# Send unauthenticated request
Request "http://127.0.0.1:8000/resource/1?b=1&a=2", (error, response, body) ->
  console.log response.statusCode + ": " + body
  return


# Send authenticated request
credentialsFunc "dh37fgj492je", (err, credentials) ->
  header = Hawk.client.header("http://127.0.0.1:8000/resource/1?b=1&a=2", "GET",
    credentials: credentials
    ext: "and welcome!"
  )
  options =
    uri: "http://127.0.0.1:8000/resource/1?b=1&a=2"
    method: "GET"
    headers:
      authorization: header.field

  Request options, (error, response, body) ->
    isValid = Hawk.client.authenticate(response, credentials, header.artifacts,
      payload: body
    )
    console.log response.statusCode + ": " + body + ((if isValid then " (valid)" else " (invalid)"))
    process.exit 0
    return

  return

