# Load modules
Crypto = require("crypto")
Boom = require("boom")

# Declare internals
internals = {}

# Generate a cryptographically strong pseudo-random data
exports.randomString = (size) ->
  buffer = exports.randomBits((size + 1) * 6)
  return buffer  if buffer instanceof Error
  string = buffer.toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "")
  string.slice 0, size

exports.randomBits = (bits) ->
  return Boom.internal("Invalid random bits count")  if not bits or bits < 0
  bytes = Math.ceil(bits / 8)
  try
    return Crypto.randomBytes(bytes)
  catch err
    return Boom.internal("Failed generating random bits: " + err.message)
  return


# Compare two strings using fixed time algorithm (to prevent time-based analysis of MAC digest match)
exports.fixedTimeComparison = (a, b) ->
  return false  if typeof a isnt "string" or typeof b isnt "string"
  mismatch = ((if a.length is b.length then 0 else 1))
  b = a  if mismatch
  i = 0
  il = a.length

  while i < il
    ac = a.charCodeAt(i)
    bc = b.charCodeAt(i)
    mismatch += ((if ac is bc then 0 else 1))
    ++i
  mismatch is 0
