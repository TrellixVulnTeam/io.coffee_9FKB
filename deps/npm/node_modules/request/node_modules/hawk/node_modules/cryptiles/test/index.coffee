# Load modules
Lab = require("lab")
Cryptiles = require("../lib")

# Declare internals
internals = {}

# Test shortcuts
expect = Lab.expect
before = Lab.before
after = Lab.after
describe = Lab.experiment
it = Lab.test
describe "Cryptiles", ->
  describe "#randomString", ->
    it "should generate the right length string", (done) ->
      i = 1

      while i <= 1000
        expect(Cryptiles.randomString(i).length).to.equal i
        ++i
      done()
      return

    it "returns an error on invalid bits size", (done) ->
      expect(Cryptiles.randomString(99999999999999999999).message).to.equal "Failed generating random bits: Argument #1 must be number > 0"
      done()
      return

    return

  describe "#randomBits", ->
    it "returns an error on invalid input", (done) ->
      expect(Cryptiles.randomBits(0).message).to.equal "Invalid random bits count"
      done()
      return

    return

  describe "#fixedTimeComparison", ->
    a = Cryptiles.randomString(50000)
    b = Cryptiles.randomString(150000)
    it "should take the same amount of time comparing different string sizes", (done) ->
      now = Date.now()
      Cryptiles.fixedTimeComparison b, a
      t1 = Date.now() - now
      now = Date.now()
      Cryptiles.fixedTimeComparison b, b
      t2 = Date.now() - now
      expect(t2 - t1).to.be.within -20, 20
      done()
      return

    it "should return true for equal strings", (done) ->
      expect(Cryptiles.fixedTimeComparison(a, a)).to.equal true
      done()
      return

    it "should return false for different strings (size, a < b)", (done) ->
      expect(Cryptiles.fixedTimeComparison(a, a + "x")).to.equal false
      done()
      return

    it "should return false for different strings (size, a > b)", (done) ->
      expect(Cryptiles.fixedTimeComparison(a + "x", a)).to.equal false
      done()
      return

    it "should return false for different strings (size, a = b)", (done) ->
      expect(Cryptiles.fixedTimeComparison(a + "x", a + "y")).to.equal false
      done()
      return

    it "should return false when not a string", (done) ->
      expect(Cryptiles.fixedTimeComparison("x", null)).to.equal false
      done()
      return

    return

  return

