# Load modules
Lab = require("lab")
Hoek = require("../lib")

# Declare internals
internals = {}

# Test shortcuts
expect = Lab.expect
before = Lab.before
after = Lab.after
describe = Lab.experiment
it = Lab.test
describe "Hoek", ->
  describe "#escapeJavaScript", ->
    it "encodes / characters", (done) ->
      encoded = Hoek.escapeJavaScript("<script>alert(1)</script>")
      expect(encoded).to.equal "\\x3cscript\\x3ealert\\x281\\x29\\x3c\\x2fscript\\x3e"
      done()
      return

    it "encodes ' characters", (done) ->
      encoded = Hoek.escapeJavaScript("something('param')")
      expect(encoded).to.equal "something\\x28\\x27param\\x27\\x29"
      done()
      return

    it "encodes large unicode characters with the correct padding", (done) ->
      encoded = Hoek.escapeJavaScript(String.fromCharCode(500) + String.fromCharCode(1000))
      expect(encoded).to.equal "\\u0500\\u1000"
      done()
      return

    it "doesn't throw an exception when passed null", (done) ->
      encoded = Hoek.escapeJavaScript(null)
      expect(encoded).to.equal ""
      done()
      return

    return

  describe "#escapeHtml", ->
    it "encodes / characters", (done) ->
      encoded = Hoek.escapeHtml("<script>alert(1)</script>")
      expect(encoded).to.equal "&lt;script&gt;alert&#x28;1&#x29;&lt;&#x2f;script&gt;"
      done()
      return

    it "encodes < and > as named characters", (done) ->
      encoded = Hoek.escapeHtml("<script><>")
      expect(encoded).to.equal "&lt;script&gt;&lt;&gt;"
      done()
      return

    it "encodes large unicode characters", (done) ->
      encoded = Hoek.escapeHtml(String.fromCharCode(500) + String.fromCharCode(1000))
      expect(encoded).to.equal "&#500;&#1000;"
      done()
      return

    it "doesn't throw an exception when passed null", (done) ->
      encoded = Hoek.escapeHtml(null)
      expect(encoded).to.equal ""
      done()
      return

    return

  return

