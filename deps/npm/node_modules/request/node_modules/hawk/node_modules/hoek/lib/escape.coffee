# Declare internals
internals = {}
exports.escapeJavaScript = (input) ->
  return ""  unless input
  escaped = ""
  i = 0
  il = input.length

  while i < il
    charCode = input.charCodeAt(i)
    if internals.isSafe(charCode)
      escaped += input[i]
    else
      escaped += internals.escapeJavaScriptChar(charCode)
    ++i
  escaped

exports.escapeHtml = (input) ->
  return ""  unless input
  escaped = ""
  i = 0
  il = input.length

  while i < il
    charCode = input.charCodeAt(i)
    if internals.isSafe(charCode)
      escaped += input[i]
    else
      escaped += internals.escapeHtmlChar(charCode)
    ++i
  escaped

internals.escapeJavaScriptChar = (charCode) ->
  return "\\u" + internals.padLeft("" + charCode, 4)  if charCode >= 256
  hexValue = new Buffer(String.fromCharCode(charCode), "ascii").toString("hex")
  "\\x" + internals.padLeft(hexValue, 2)

internals.escapeHtmlChar = (charCode) ->
  namedEscape = internals.namedHtml[charCode]
  return namedEscape  if typeof namedEscape isnt "undefined"
  return "&#" + charCode + ";"  if charCode >= 256
  hexValue = new Buffer(String.fromCharCode(charCode), "ascii").toString("hex")
  "&#x" + internals.padLeft(hexValue, 2) + ";"

internals.padLeft = (str, len) ->
  str = "0" + str  while str.length < len
  str

internals.isSafe = (charCode) ->
  typeof internals.safeCharCodes[charCode] isnt "undefined"

internals.namedHtml =
  38: "&amp;"
  60: "&lt;"
  62: "&gt;"
  34: "&quot;"
  160: "&nbsp;"
  162: "&cent;"
  163: "&pound;"
  164: "&curren;"
  169: "&copy;"
  174: "&reg;"

internals.safeCharCodes = (->
  safe = {}
  i = 32

  while i < 123
    # a-z
    # A-Z
    # 0-9
    # space
    # .
    # ,
    # -
    # :
    # _
    safe[i] = null  if (i >= 97 and i <= 122) or (i >= 65 and i <= 90) or (i >= 48 and i <= 57) or i is 32 or i is 46 or i is 44 or i is 45 or i is 58 or i is 95
    ++i
  safe
())
