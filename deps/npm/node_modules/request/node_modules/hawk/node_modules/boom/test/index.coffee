# Load modules
Lab = require("lab")
Boom = require("../lib")

# Declare internals
internals = {}

# Test shortcuts
expect = Lab.expect
before = Lab.before
after = Lab.after
describe = Lab.experiment
it = Lab.test
describe "Boom", ->
  it "returns an error with info when constructed using another error", (done) ->
    error = new Error("ka-boom")
    error.xyz = 123
    err = new Boom(error)
    expect(err.data.xyz).to.equal 123
    expect(err.message).to.equal "ka-boom"
    expect(err.response).to.deep.equal
      code: 500
      payload:
        code: 500
        error: "Internal Server Error"
        message: "ka-boom"

      headers: {}

    done()
    return

  describe "#isBoom", ->
    it "returns true for Boom object", (done) ->
      expect(Boom.badRequest().isBoom).to.equal true
      done()
      return

    it "returns false for Error object", (done) ->
      expect(new Error().isBoom).to.not.exist
      done()
      return

    return

  describe "#badRequest", ->
    it "returns a 400 error code", (done) ->
      expect(Boom.badRequest().response.code).to.equal 400
      done()
      return

    it "sets the message with the passed in message", (done) ->
      expect(Boom.badRequest("my message").message).to.equal "my message"
      done()
      return

    return

  describe "#unauthorized", ->
    it "returns a 401 error code", (done) ->
      err = Boom.unauthorized()
      expect(err.response.code).to.equal 401
      expect(err.response.headers).to.deep.equal {}
      done()
      return

    it "sets the message with the passed in message", (done) ->
      expect(Boom.unauthorized("my message").message).to.equal "my message"
      done()
      return

    it "returns a WWW-Authenticate header when passed a scheme", (done) ->
      err = Boom.unauthorized("boom", "Test")
      expect(err.response.code).to.equal 401
      expect(err.response.headers["WWW-Authenticate"]).to.equal "Test error=\"boom\""
      done()
      return

    it "returns a WWW-Authenticate header when passed a scheme and attributes", (done) ->
      err = Boom.unauthorized("boom", "Test",
        a: 1
        b: "something"
        c: null
        d: 0
      )
      expect(err.response.code).to.equal 401
      expect(err.response.headers["WWW-Authenticate"]).to.equal "Test a=\"1\", b=\"something\", c=\"\", d=\"0\", error=\"boom\""
      done()
      return

    it "sets the isMissing flag when error message is empty", (done) ->
      err = Boom.unauthorized("", "Basic")
      expect(err.isMissing).to.equal true
      done()
      return

    it "does not set the isMissing flag when error message is not empty", (done) ->
      err = Boom.unauthorized("message", "Basic")
      expect(err.isMissing).to.equal `undefined`
      done()
      return

    it "sets a WWW-Authenticate when passed as an array", (done) ->
      err = Boom.unauthorized("message", [
        "Basic"
        "Example e=\"1\""
        "Another x=\"3\", y=\"4\""
      ])
      expect(err.response.headers["WWW-Authenticate"]).to.equal "Basic, Example e=\"1\", Another x=\"3\", y=\"4\""
      done()
      return

    return

  describe "#clientTimeout", ->
    it "returns a 408 error code", (done) ->
      expect(Boom.clientTimeout().response.code).to.equal 408
      done()
      return

    it "sets the message with the passed in message", (done) ->
      expect(Boom.clientTimeout("my message").message).to.equal "my message"
      done()
      return

    return

  describe "#serverTimeout", ->
    it "returns a 503 error code", (done) ->
      expect(Boom.serverTimeout().response.code).to.equal 503
      done()
      return

    it "sets the message with the passed in message", (done) ->
      expect(Boom.serverTimeout("my message").message).to.equal "my message"
      done()
      return

    return

  describe "#forbidden", ->
    it "returns a 403 error code", (done) ->
      expect(Boom.forbidden().response.code).to.equal 403
      done()
      return

    it "sets the message with the passed in message", (done) ->
      expect(Boom.forbidden("my message").message).to.equal "my message"
      done()
      return

    return

  describe "#notFound", ->
    it "returns a 404 error code", (done) ->
      expect(Boom.notFound().response.code).to.equal 404
      done()
      return

    it "sets the message with the passed in message", (done) ->
      expect(Boom.notFound("my message").message).to.equal "my message"
      done()
      return

    return

  describe "#internal", ->
    it "returns a 500 error code", (done) ->
      expect(Boom.internal().response.code).to.equal 500
      done()
      return

    it "sets the message with the passed in message", (done) ->
      err = Boom.internal("my message")
      expect(err.message).to.equal "my message"
      expect(err.response.payload.message).to.equal "An internal server error occurred"
      done()
      return

    it "passes data on the callback if its passed in", (done) ->
      expect(Boom.internal("my message",
        my: "data"
      ).data.my).to.equal "data"
      done()
      return

    it "uses passed in stack if its available", (done) ->
      error = new Error()
      error.stack = "my stack line\nmy second stack line"
      expect(Boom.internal("my message", error).trace[0]).to.equal "my stack line"
      done()
      return

    return

  describe "#passThrough", ->
    it "returns a pass-through error", (done) ->
      err = Boom.passThrough(499,
        a: 1
      , "application/text",
        "X-Test": "Boom"
      )
      expect(err.response.code).to.equal 499
      expect(err.message).to.equal "Pass-through"
      expect(err.response).to.deep.equal
        code: 499
        payload:
          a: 1

        headers:
          "X-Test": "Boom"

        type: "application/text"

      done()
      return

    return

  describe "#reformat", ->
    it "encodes any HTML markup in the response payload", (done) ->
      boom = new Boom(new Error("<script>alert(1)</script>"))
      expect(boom.response.payload.message).to.not.contain "<script>"
      done()
      return

    return

  return

