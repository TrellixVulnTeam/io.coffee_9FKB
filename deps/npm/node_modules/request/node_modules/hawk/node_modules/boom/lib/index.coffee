# Load modules
Http = require("http")
NodeUtil = require("util")
Hoek = require("hoek")

# Declare internals
internals = {}
exports = module.exports = internals.Boom = -> # (new Error) or (code, message)
  self = this
  Hoek.assert @constructor is internals.Boom, "Error must be instantiated using new"
  Error.call this
  @isBoom = true
  @response =
    code: 0
    payload: {}
    headers: {}

  
  # type: 'content-type'
  if arguments[0] instanceof Error
    
    # Error
    error = arguments[0]
    @data = error
    @response.code = error.code or 500
    @message = error.message  if error.message
  else
    
    # code, message
    code = arguments[0]
    message = arguments[1]
    Hoek.assert not isNaN(parseFloat(code)) and isFinite(code) and code >= 400, "First argument must be a number (400+)"
    @response.code = code
    @message = message  if message
  
  # Response format
  @reformat()
  this

NodeUtil.inherits internals.Boom, Error
internals.Boom::reformat = ->
  @response.payload.code = @response.code
  @response.payload.error = Http.STATUS_CODES[@response.code] or "Unknown"
  @response.payload.message = Hoek.escapeHtml(@message)  if @message # Prevent XSS from error message
  return


# Utilities
internals.Boom.badRequest = (message) ->
  new internals.Boom(400, message)

internals.Boom.unauthorized = (message, scheme, attributes) -> # Or function (message, wwwAuthenticate[])
  err = new internals.Boom(401, message)
  return err  unless scheme
  wwwAuthenticate = ""
  if typeof scheme is "string"
    
    # function (message, scheme, attributes)
    wwwAuthenticate = scheme
    if attributes
      names = Object.keys(attributes)
      i = 0
      il = names.length

      while i < il
        wwwAuthenticate += ","  if i
        value = attributes[names[i]]
        # Value can be zero
        value = ""  if value is null or value is `undefined`
        wwwAuthenticate += " " + names[i] + "=\"" + Hoek.escapeHeaderAttribute(value.toString()) + "\""
        ++i
    if message
      wwwAuthenticate += ","  if attributes
      wwwAuthenticate += " error=\"" + Hoek.escapeHeaderAttribute(message) + "\""
    else
      err.isMissing = true
  else
    
    # function (message, wwwAuthenticate[])
    wwwArray = scheme
    i = 0
    il = wwwArray.length

    while i < il
      wwwAuthenticate += ", "  if i
      wwwAuthenticate += wwwArray[i]
      ++i
  err.response.headers["WWW-Authenticate"] = wwwAuthenticate
  err

internals.Boom.clientTimeout = (message) ->
  new internals.Boom(408, message)

internals.Boom.serverTimeout = (message) ->
  new internals.Boom(503, message)

internals.Boom.forbidden = (message) ->
  new internals.Boom(403, message)

internals.Boom.notFound = (message) ->
  new internals.Boom(404, message)

internals.Boom.internal = (message, data) ->
  err = new internals.Boom(500, message)
  if data and data.stack
    err.trace = data.stack.split("\n")
    err.outterTrace = Hoek.displayStack(1)
  else
    err.trace = Hoek.displayStack(1)
  err.data = data
  err.response.payload.message = "An internal server error occurred" # Hide actual error from user
  err

internals.Boom.passThrough = (code, payload, contentType, headers) ->
  err = new internals.Boom(500, "Pass-through") # 500 code is only used to initialize
  err.data =
    code: code
    payload: payload
    type: contentType

  err.response.code = code
  err.response.type = contentType
  err.response.headers = headers
  err.response.payload = payload
  err
