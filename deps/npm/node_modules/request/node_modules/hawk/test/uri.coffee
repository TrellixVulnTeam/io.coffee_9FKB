# Load modules
Http = require("http")
Lab = require("lab")
Hawk = require("../lib")

# Declare internals
internals = {}

# Test shortcuts
expect = Lab.expect
before = Lab.before
after = Lab.after
describe = Lab.experiment
it = Lab.test
describe "Hawk", ->
  describe "Uri", ->
    credentialsFunc = (id, callback) ->
      credentials =
        id: id
        key: "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn"
        algorithm: "sha256"
        user: "steve"

      callback null, credentials

    it "should generate a bewit then successfully authenticate it", (done) ->
      req =
        method: "GET"
        url: "/resource/4?a=1&b=2"
        host: "example.com"
        port: 80

      credentialsFunc "123456", (err, credentials) ->
        bewit = Hawk.uri.getBewit("http://example.com/resource/4?a=1&b=2",
          credentials: credentials
          ttlSec: 60 * 60 * 24 * 365 * 100
          ext: "some-app-data"
        )
        req.url += "&bewit=" + bewit
        Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
          expect(err).to.not.exist
          expect(credentials.user).to.equal "steve"
          expect(attributes.ext).to.equal "some-app-data"
          done()
          return

        return

      return

    it "should generate a bewit then successfully authenticate it (no ext)", (done) ->
      req =
        method: "GET"
        url: "/resource/4?a=1&b=2"
        host: "example.com"
        port: 80

      credentialsFunc "123456", (err, credentials) ->
        bewit = Hawk.uri.getBewit("http://example.com/resource/4?a=1&b=2",
          credentials: credentials
          ttlSec: 60 * 60 * 24 * 365 * 100
        )
        req.url += "&bewit=" + bewit
        Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
          expect(err).to.not.exist
          expect(credentials.user).to.equal "steve"
          done()
          return

        return

      return

    it "should successfully authenticate a request (last param)", (done) ->
      req =
        method: "GET"
        url: "/resource/4?a=1&b=2&bewit=MTIzNDU2XDQ1MTE0ODQ2MjFcMzFjMmNkbUJFd1NJRVZDOVkva1NFb2c3d3YrdEVNWjZ3RXNmOGNHU2FXQT1cc29tZS1hcHAtZGF0YQ"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.not.exist
        expect(credentials.user).to.equal "steve"
        expect(attributes.ext).to.equal "some-app-data"
        done()
        return

      return

    it "should successfully authenticate a request (first param)", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=MTIzNDU2XDQ1MTE0ODQ2MjFcMzFjMmNkbUJFd1NJRVZDOVkva1NFb2c3d3YrdEVNWjZ3RXNmOGNHU2FXQT1cc29tZS1hcHAtZGF0YQ&a=1&b=2"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.not.exist
        expect(credentials.user).to.equal "steve"
        expect(attributes.ext).to.equal "some-app-data"
        done()
        return

      return

    it "should successfully authenticate a request (only param)", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=MTIzNDU2XDQ1MTE0ODQ2NDFcZm1CdkNWT3MvcElOTUUxSTIwbWhrejQ3UnBwTmo4Y1VrSHpQd3Q5OXJ1cz1cc29tZS1hcHAtZGF0YQ"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.not.exist
        expect(credentials.user).to.equal "steve"
        expect(attributes.ext).to.equal "some-app-data"
        done()
        return

      return

    it "should fail on multiple authentication", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=MTIzNDU2XDQ1MTE0ODQ2NDFcZm1CdkNWT3MvcElOTUUxSTIwbWhrejQ3UnBwTmo4Y1VrSHpQd3Q5OXJ1cz1cc29tZS1hcHAtZGF0YQ"
        host: "example.com"
        port: 8080
        authorization: "Basic asdasdasdasd"

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.equal "Multiple authentications"
        done()
        return

      return

    it "should fail on method other than GET", (done) ->
      credentialsFunc "123456", (err, credentials) ->
        req =
          method: "POST"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080

        exp = Math.floor(Hawk.utils.now() / 1000) + 60
        ext = "some-app-data"
        mac = Hawk.crypto.calculateMac("bewit", credentials,
          timestamp: exp
          nonce: ""
          method: req.method
          resource: req.url
          host: req.host
          port: req.port
          ext: ext
        )
        bewit = credentials.id + "\\" + exp + "\\" + mac + "\\" + ext
        req.url += "&bewit=" + Hawk.utils.base64urlEncode(bewit)
        Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Invalid method"
          done()
          return

        return

      return

    it "should fail on invalid host header", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ"
        headers:
          host: "example.com:something"

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.equal "Invalid Host header"
        done()
        return

      return

    it "should fail on empty bewit", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit="
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.equal "Empty bewit"
        expect(err.isMissing).to.not.exist
        done()
        return

      return

    it "should fail on invalid bewit", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=*"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.equal "Invalid bewit encoding"
        expect(err.isMissing).to.not.exist
        done()
        return

      return

    it "should fail on missing bewit", (done) ->
      req =
        method: "GET"
        url: "/resource/4"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.not.exist
        expect(err.isMissing).to.equal true
        done()
        return

      return

    it "should fail on invalid bewit structure", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=abc"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.equal "Invalid bewit structure"
        done()
        return

      return

    it "should fail on empty bewit attribute", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=YVxcY1xk"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.equal "Missing bewit attributes"
        done()
        return

      return

    it "should fail on expired access", (done) ->
      req =
        method: "GET"
        url: "/resource/4?a=1&b=2&bewit=MTIzNDU2XDEzNTY0MTg1ODNcWk1wZlMwWU5KNHV0WHpOMmRucTRydEk3NXNXTjFjeWVITTcrL0tNZFdVQT1cc29tZS1hcHAtZGF0YQ"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, credentialsFunc, {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.equal "Access expired"
        done()
        return

      return

    it "should fail on credentials function error", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, ((id, callback) ->
        callback Hawk.error.badRequest("Boom")
        return
      ), {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.equal "Boom"
        done()
        return

      return

    it "should fail on null credentials function response", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, ((id, callback) ->
        callback null, null
        return
      ), {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.equal "Unknown credentials"
        done()
        return

      return

    it "should fail on invalid credentials function response", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, ((id, callback) ->
        callback null, {}
        return
      ), {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.message).to.equal "Invalid credentials"
        done()
        return

      return

    it "should fail on invalid credentials function response (unknown algorithm)", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, ((id, callback) ->
        callback null,
          key: "xxx"
          algorithm: "xxx"

        return
      ), {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.message).to.equal "Unknown algorithm"
        done()
        return

      return

    it "should fail on expired access", (done) ->
      req =
        method: "GET"
        url: "/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ"
        host: "example.com"
        port: 8080

      Hawk.uri.authenticate req, ((id, callback) ->
        callback null,
          key: "xxx"
          algorithm: "sha256"

        return
      ), {}, (err, credentials, attributes) ->
        expect(err).to.exist
        expect(err.response.payload.message).to.equal "Bad mac"
        done()
        return

      return

    return

  describe "#getBewit", ->
    it "should return a valid bewit value", (done) ->
      credentials =
        id: "123456"
        key: "2983d45yun89q"
        algorithm: "sha256"

      bewit = Hawk.uri.getBewit("https://example.com/somewhere/over/the/rainbow",
        credentials: credentials
        ttlSec: 300
        localtimeOffsetMsec: 1356420407232 - Hawk.utils.now()
        ext: "xandyandz"
      )
      expect(bewit).to.equal "MTIzNDU2XDEzNTY0MjA3MDdca3NjeHdOUjJ0SnBQMVQxekRMTlBiQjVVaUtJVTl0T1NKWFRVZEc3WDloOD1ceGFuZHlhbmR6"
      done()
      return

    it "should return an empty bewit on invalid credentials", (done) ->
      credentials =
        key: "2983d45yun89q"
        algorithm: "sha256"

      bewit = Hawk.uri.getBewit("https://example.com/somewhere/over/the/rainbow",
        credentials: credentials
        ttlSec: 3000
        ext: "xandyandz"
      )
      expect(bewit).to.equal ""
      done()
      return

    it "should return an empty bewit on invalid algorithm", (done) ->
      credentials =
        id: "123456"
        key: "2983d45yun89q"
        algorithm: "hmac-sha-0"

      bewit = Hawk.uri.getBewit("https://example.com/somewhere/over/the/rainbow",
        credentials: credentials
        ttlSec: 300
        ext: "xandyandz"
      )
      expect(bewit).to.equal ""
      done()
      return

    it "should return an empty bewit on missing options", (done) ->
      credentials =
        id: "123456"
        key: "2983d45yun89q"
        algorithm: "hmac-sha-0"

      bewit = Hawk.uri.getBewit("https://example.com/somewhere/over/the/rainbow")
      expect(bewit).to.equal ""
      done()
      return

    return

  return

