# Load modules
Lab = require("lab")
Hawk = require("../lib")
Package = require("../package.json")

# Declare internals
internals = {}

# Test shortcuts
expect = Lab.expect
before = Lab.before
after = Lab.after
describe = Lab.experiment
it = Lab.test
describe "Hawk", ->
  describe "Utils", ->
    describe "#parseHost", ->
      it "returns port 80 for non tls node request", (done) ->
        req =
          method: "POST"
          url: "/resource/4?filter=a"
          headers:
            host: "example.com"
            "content-type": "text/plain;x=y"

        expect(Hawk.utils.parseHost(req, "Host").port).to.equal 80
        done()
        return

      it "returns port 443 for non tls node request", (done) ->
        req =
          method: "POST"
          url: "/resource/4?filter=a"
          headers:
            host: "example.com"
            "content-type": "text/plain;x=y"

          connection:
            encrypted: true

        expect(Hawk.utils.parseHost(req, "Host").port).to.equal 443
        done()
        return

      it "returns port 443 for non tls node request (IPv6)", (done) ->
        req =
          method: "POST"
          url: "/resource/4?filter=a"
          headers:
            host: "[123:123:123]"
            "content-type": "text/plain;x=y"

          connection:
            encrypted: true

        expect(Hawk.utils.parseHost(req, "Host").port).to.equal 443
        done()
        return

      it "parses IPv6 headers", (done) ->
        req =
          method: "POST"
          url: "/resource/4?filter=a"
          headers:
            host: "[123:123:123]:8000"
            "content-type": "text/plain;x=y"

          connection:
            encrypted: true

        host = Hawk.utils.parseHost(req, "Host")
        expect(host.port).to.equal "8000"
        expect(host.name).to.equal "[123:123:123]"
        done()
        return

      return

    describe "#version", ->
      it "returns the correct package version number", (done) ->
        expect(Hawk.utils.version()).to.equal Package.version
        done()
        return

      return

    describe "#unauthorized", ->
      it "returns a hawk 401", (done) ->
        expect(Hawk.utils.unauthorized("kaboom").response.headers["WWW-Authenticate"]).to.equal "Hawk error=\"kaboom\""
        done()
        return

      return

    return

  return

