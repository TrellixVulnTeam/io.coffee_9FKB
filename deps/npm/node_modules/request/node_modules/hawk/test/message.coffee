# Load modules
Url = require("url")
Lab = require("lab")
Hoek = require("hoek")
Hawk = require("../lib")

# Declare internals
internals = {}

# Test shortcuts
expect = Lab.expect
before = Lab.before
after = Lab.after
describe = Lab.experiment
it = Lab.test
describe "Hawk", ->
  credentialsFunc = (id, callback) ->
    credentials =
      id: id
      key: "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn"
      algorithm: ((if id is "1" then "sha1" else "sha256"))
      user: "steve"

    callback null, credentials

  it "should generate an authorization then successfully parse it", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.exist
      Hawk.server.authenticateMessage "example.com", 8080, "some message", auth, credentialsFunc, {}, (err, credentials) ->
        expect(err).to.not.exist
        expect(credentials.user).to.equal "steve"
        done()
        return

      return

    return

  it "should fail authorization on mismatching host", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.exist
      Hawk.server.authenticateMessage "example1.com", 8080, "some message", auth, credentialsFunc, {}, (err, credentials) ->
        expect(err).to.exist
        expect(err.message).to.equal "Bad mac"
        done()
        return

      return

    return

  it "should fail authorization on stale timestamp", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.exist
      Hawk.server.authenticateMessage "example.com", 8080, "some message", auth, credentialsFunc,
        localtimeOffsetMsec: 100000
      , (err, credentials) ->
        expect(err).to.exist
        expect(err.message).to.equal "Stale timestamp"
        done()
        return

      return

    return

  it "should fail authorization on invalid authorization", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.exist
      delete auth.id

      Hawk.server.authenticateMessage "example.com", 8080, "some message", auth, credentialsFunc, {}, (err, credentials) ->
        expect(err).to.exist
        expect(err.message).to.equal "Invalid authorization"
        done()
        return

      return

    return

  it "should fail authorization on bad hash", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.exist
      Hawk.server.authenticateMessage "example.com", 8080, "some message1", auth, credentialsFunc, {}, (err, credentials) ->
        expect(err).to.exist
        expect(err.message).to.equal "Bad message hash"
        done()
        return

      return

    return

  it "should fail authorization on nonce error", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.exist
      Hawk.server.authenticateMessage "example.com", 8080, "some message", auth, credentialsFunc,
        nonceFunc: (nonce, ts, callback) ->
          callback new Error("kaboom")
          return
      , (err, credentials) ->
        expect(err).to.exist
        expect(err.message).to.equal "Invalid nonce"
        done()
        return

      return

    return

  it "should fail authorization on credentials error", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.exist
      errFunc = (id, callback) ->
        callback new Error("kablooey")
        return

      Hawk.server.authenticateMessage "example.com", 8080, "some message", auth, errFunc, {}, (err, credentials) ->
        expect(err).to.exist
        expect(err.message).to.equal "kablooey"
        done()
        return

      return

    return

  it "should fail authorization on missing credentials", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.exist
      errFunc = (id, callback) ->
        callback()
        return

      Hawk.server.authenticateMessage "example.com", 8080, "some message", auth, errFunc, {}, (err, credentials) ->
        expect(err).to.exist
        expect(err.message).to.equal "Unknown credentials"
        done()
        return

      return

    return

  it "should fail authorization on invalid credentials", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.exist
      errFunc = (id, callback) ->
        callback null, {}
        return

      Hawk.server.authenticateMessage "example.com", 8080, "some message", auth, errFunc, {}, (err, credentials) ->
        expect(err).to.exist
        expect(err.message).to.equal "Invalid credentials"
        done()
        return

      return

    return

  it "should fail authorization on invalid credentials algorithm", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.exist
      errFunc = (id, callback) ->
        callback null,
          key: "123"
          algorithm: "456"

        return

      Hawk.server.authenticateMessage "example.com", 8080, "some message", auth, errFunc, {}, (err, credentials) ->
        expect(err).to.exist
        expect(err.message).to.equal "Unknown algorithm"
        done()
        return

      return

    return

  it "should fail on missing host", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      auth = Hawk.client.message(null, 8080, "some message",
        credentials: credentials
      )
      expect(auth).to.not.exist
      done()
      return

    return

  it "should fail on missing credentials", (done) ->
    auth = Hawk.client.message("example.com", 8080, "some message", {})
    expect(auth).to.not.exist
    done()
    return

  it "should fail on invalid algorithm", (done) ->
    credentialsFunc "123456", (err, credentials) ->
      creds = Hoek.clone(credentials)
      creds.algorithm = "blah"
      auth = Hawk.client.message("example.com", 8080, "some message",
        credentials: creds
      )
      expect(auth).to.not.exist
      done()
      return

    return

  return

