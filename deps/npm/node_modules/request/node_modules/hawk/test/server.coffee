# Load modules
Url = require("url")
Lab = require("lab")
Hawk = require("../lib")

# Declare internals
internals = {}

# Test shortcuts
expect = Lab.expect
before = Lab.before
after = Lab.after
describe = Lab.experiment
it = Lab.test
describe "Hawk", ->
  describe "server", ->
    credentialsFunc = (id, callback) ->
      credentials =
        id: id
        key: "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn"
        algorithm: ((if id is "1" then "sha1" else "sha256"))
        user: "steve"

      callback null, credentials

    describe "#authenticate", ->
      it "should parse a valid authentication header (sha1)", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.not.exist
          expect(credentials.user).to.equal "steve"
          done()
          return

        return

      it "should parse a valid authentication header (sha256)", (done) ->
        req =
          method: "GET"
          url: "/resource/1?b=1&a=2"
          host: "example.com"
          port: 8000
          authorization: "Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", mac=\"m8r1rHbXN6NgO+KIIhjO7sFRyd78RNGVUwehe8Cp2dU=\", ext=\"some-app-data\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353832234000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.not.exist
          expect(credentials.user).to.equal "steve"
          done()
          return

        return

      it "should parse a valid authentication header (host override)", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          headers:
            host: "example1.com:8080"
            authorization: "Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          host: "example.com"
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.not.exist
          expect(credentials.user).to.equal "steve"
          done()
          return

        return

      it "should parse a valid authentication header (host port override)", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          headers:
            host: "example1.com:80"
            authorization: "Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          host: "example.com"
          port: 8080
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.not.exist
          expect(credentials.user).to.equal "steve"
          done()
          return

        return

      it "should parse a valid authentication header (POST with payload)", (done) ->
        req =
          method: "POST"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123456\", ts=\"1357926341\", nonce=\"1AwuJD\", hash=\"qAiXIVv+yjDATneWxZP2YCTa9aHRgQdnH9b3Wc+o3dg=\", ext=\"some-app-data\", mac=\"UeYcj5UoTVaAWXNvJfLVia7kU3VabxCqrccXP8sUGC4=\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1357926341000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.not.exist
          expect(credentials.user).to.equal "steve"
          done()
          return

        return

      it "should fail on missing hash", (done) ->
        req =
          method: "GET"
          url: "/resource/1?b=1&a=2"
          host: "example.com"
          port: 8000
          authorization: "Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", mac=\"m8r1rHbXN6NgO+KIIhjO7sFRyd78RNGVUwehe8Cp2dU=\", ext=\"some-app-data\""

        Hawk.server.authenticate req, credentialsFunc,
          payload: "body"
          localtimeOffsetMsec: 1353832234000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Missing required payload hash"
          done()
          return

        return

      it "should fail on a stale timestamp", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123456\", ts=\"1362337299\", nonce=\"UzmxSs\", ext=\"some-app-data\", mac=\"wnNUxchvvryMH2RxckTdZ/gY3ijzvccx4keVvELC61w=\""

        Hawk.server.authenticate req, credentialsFunc, {}, (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Stale timestamp"
          header = err.response.headers["WWW-Authenticate"]
          ts = header.match(/^Hawk ts\=\"(\d+)\"\, tsm\=\"([^\"]+)\"\, error=\"Stale timestamp\"$/)
          now = Hawk.utils.now()
          expect(parseInt(ts[1], 10) * 1000).to.be.within now - 1000, now + 1000
          res = headers:
            "www-authenticate": header

          expect(Hawk.client.authenticate(res, credentials, artifacts)).to.equal true
          done()
          return

        return

      it "should fail on a replay", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"bXx7a7p1h9QYQNZ8x7QhvDQym8ACgab4m3lVSFn4DBw=\", ext=\"hello\""

        memoryCache = {}
        options =
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
          nonceFunc: (nonce, ts, callback) ->
            return callback(new Error())  if memoryCache[nonce]
            memoryCache[nonce] = true
            callback()

        Hawk.server.authenticate req, credentialsFunc, options, (err, credentials, artifacts) ->
          expect(err).to.not.exist
          expect(credentials.user).to.equal "steve"
          Hawk.server.authenticate req, credentialsFunc, options, (err, credentials, artifacts) ->
            expect(err).to.exist
            expect(err.response.payload.message).to.equal "Invalid nonce"
            done()
            return

          return

        return

      it "should fail on an invalid authentication header: wrong scheme", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Basic asdasdasdasd"

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.not.exist
          done()
          return

        return

      it "should fail on an invalid authentication header: no scheme", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "!@#"

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Invalid header syntax"
          done()
          return

        return

      it "should fail on an missing authorization header", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080

        Hawk.server.authenticate req, credentialsFunc, {}, (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.isMissing).to.equal true
          done()
          return

        return

      it "should fail on an missing host header", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          headers:
            authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Invalid Host header"
          done()
          return

        return

      it "should fail on an missing authorization attribute (id)", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Missing attributes"
          done()
          return

        return

      it "should fail on an missing authorization attribute (ts)", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Missing attributes"
          done()
          return

        return

      it "should fail on an missing authorization attribute (nonce)", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", ts=\"1353788437\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Missing attributes"
          done()
          return

        return

      it "should fail on an missing authorization attribute (mac)", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Missing attributes"
          done()
          return

        return

      it "should fail on an unknown authorization attribute", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", x=\"3\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Unknown attribute: x"
          done()
          return

        return

      it "should fail on an bad authorization header format", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\\\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Bad header format"
          done()
          return

        return

      it "should fail on an bad authorization attribute value", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"\t\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Bad attribute value: id"
          done()
          return

        return

      it "should fail on an empty authorization attribute value", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Bad attribute value: id"
          done()
          return

        return

      it "should fail on duplicated authorization attribute key", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", id=\"456\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Duplicate attribute: id"
          done()
          return

        return

      it "should fail on an invalid authorization header format", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk"

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Invalid header syntax"
          done()
          return

        return

      it "should fail on an bad host header (missing host)", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          headers:
            host: ":8080"
            authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Invalid Host header"
          done()
          return

        return

      it "should fail on an bad host header (pad port)", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          headers:
            host: "example.com:something"
            authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Invalid Host header"
          done()
          return

        return

      it "should fail on credentialsFunc error", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        credentialsFunc = (id, callback) ->
          callback new Error("Unknown user")

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.message).to.equal "Unknown user"
          done()
          return

        return

      it "should fail on missing credentials", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        credentialsFunc = (id, callback) ->
          callback null, null

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Unknown credentials"
          done()
          return

        return

      it "should fail on invalid credentials", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        credentialsFunc = (id, callback) ->
          credentials =
            key: "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn"
            user: "steve"

          callback null, credentials

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.message).to.equal "Invalid credentials"
          expect(err.response.payload.message).to.equal "An internal server error occurred"
          done()
          return

        return

      it "should fail on unknown credentials algorithm", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        credentialsFunc = (id, callback) ->
          credentials =
            key: "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn"
            algorithm: "hmac-sha-0"
            user: "steve"

          callback null, credentials

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.message).to.equal "Unknown algorithm"
          expect(err.response.payload.message).to.equal "An internal server error occurred"
          done()
          return

        return

      it "should fail on unknown bad mac", (done) ->
        req =
          method: "GET"
          url: "/resource/4?filter=a"
          host: "example.com"
          port: 8080
          authorization: "Hawk id=\"123\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"/qwS4UjfVWMcU4jlr7T/wuKe3dKijvTvSos=\", ext=\"hello\""

        credentialsFunc = (id, callback) ->
          credentials =
            key: "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn"
            algorithm: "sha256"
            user: "steve"

          callback null, credentials

        Hawk.server.authenticate req, credentialsFunc,
          localtimeOffsetMsec: 1353788437000 - Hawk.utils.now()
        , (err, credentials, artifacts) ->
          expect(err).to.exist
          expect(err.response.payload.message).to.equal "Bad mac"
          done()
          return

        return

      return

    describe "#header", ->
      it "should return an empty authorization header on missing options", (done) ->
        header = Hawk.server.header()
        expect(header).to.equal ""
        done()
        return

      it "should return an empty authorization header on missing credentials", (done) ->
        header = Hawk.server.header(null, {})
        expect(header).to.equal ""
        done()
        return

      it "should return an empty authorization header on invalid credentials", (done) ->
        credentials = key: "2983d45yun89q"
        header = Hawk.server.header(credentials)
        expect(header).to.equal ""
        done()
        return

      it "should return an empty authorization header on invalid algorithm", (done) ->
        artifacts = id: "123456"
        credentials =
          key: "2983d45yun89q"
          algorithm: "hmac-sha-0"

        header = Hawk.server.header(credentials, artifacts)
        expect(header).to.equal ""
        done()
        return

      return

    return

  return

