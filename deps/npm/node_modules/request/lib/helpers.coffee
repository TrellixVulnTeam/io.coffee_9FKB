deferMethod = ->
  return process.nextTick  if typeof setImmediate is "undefined"
  setImmediate
constructObject = (initialObject) ->
  initialObject = initialObject or {}
  extend: (object) ->
    constructObject extend(initialObject, object)

  done: ->
    initialObject
constructOptionsFrom = (uri, options) ->
  params = constructObject()
  if typeof options is "object"
    params.extend(options).extend uri: uri
  else if typeof uri is "string"
    params.extend uri: uri
  else
    params.extend uri
  params.done()
isFunction = (value) ->
  typeof value is "function"
filterForCallback = (values) ->
  callbacks = values.filter(isFunction)
  callbacks[0]
paramsHaveRequestBody = (params) ->
  params.options.body or params.options.requestBodyStream or (params.options.json and typeof params.options.json isnt "boolean") or params.options.multipart
safeStringify = (obj) ->
  ret = undefined
  try
    ret = JSON.stringify(obj)
  catch e
    ret = jsonSafeStringify(obj)
  ret
md5 = (str) ->
  crypto.createHash("md5").update(str).digest "hex"
isReadStream = (rs) ->
  rs.readable and rs.path and rs.mode
toBase64 = (str) ->
  (new Buffer(str or "", "ascii")).toString "base64"
"use strict"
extend = require("util")._extend
jsonSafeStringify = require("json-stringify-safe")
crypto = require("crypto")
exports.isFunction = isFunction
exports.constructObject = constructObject
exports.constructOptionsFrom = constructOptionsFrom
exports.filterForCallback = filterForCallback
exports.paramsHaveRequestBody = paramsHaveRequestBody
exports.safeStringify = safeStringify
exports.md5 = md5
exports.isReadStream = isReadStream
exports.toBase64 = toBase64
exports.defer = deferMethod()
