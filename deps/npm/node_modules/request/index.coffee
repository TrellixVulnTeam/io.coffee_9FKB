# Copyright 2010-2012 Mikeal Rogers
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

# organize params for patch, post, put, head, del
initParams = (uri, options, callback) ->
  callback = filterForCallback([
    options
    callback
  ])
  options = constructOptionsFrom(uri, options)
  constructObject().extend(callback: callback).extend(options: options).extend(uri: options.uri).done()
request = (uri, options, callback) ->
  throw new Error("undefined is not a valid uri or options object.")  if typeof uri is "undefined"
  params = initParams(uri, options, callback)
  options = params.options
  options.callback = params.callback
  options.uri = params.uri
  new request.Request(options)
requester = (params) ->
  return params.options._requester  if typeof params.options._requester is "function"
  request
"use strict"
extend = require("util")._extend
cookies = require("./lib/cookies")
helpers = require("./lib/helpers")
isFunction = helpers.isFunction
constructObject = helpers.constructObject
filterForCallback = helpers.filterForCallback
constructOptionsFrom = helpers.constructOptionsFrom
paramsHaveRequestBody = helpers.paramsHaveRequestBody
request.get = (uri, options, callback) ->
  params = initParams(uri, options, callback)
  params.options.method = "GET"
  requester(params) params.uri or null, params.options, params.callback

request.head = (uri, options, callback) ->
  params = initParams(uri, options, callback)
  params.options.method = "HEAD"
  throw new Error("HTTP HEAD requests MUST NOT include a request body.")  if paramsHaveRequestBody(params)
  requester(params) params.uri or null, params.options, params.callback

request.post = (uri, options, callback) ->
  params = initParams(uri, options, callback)
  params.options.method = "POST"
  requester(params) params.uri or null, params.options, params.callback

request.put = (uri, options, callback) ->
  params = initParams(uri, options, callback)
  params.options.method = "PUT"
  requester(params) params.uri or null, params.options, params.callback

request.patch = (uri, options, callback) ->
  params = initParams(uri, options, callback)
  params.options.method = "PATCH"
  requester(params) params.uri or null, params.options, params.callback

request.del = (uri, options, callback) ->
  params = initParams(uri, options, callback)
  params.options.method = "DELETE"
  requester(params) params.uri or null, params.options, params.callback

request.jar = ->
  cookies.jar()

request.cookie = (str) ->
  cookies.parse str

request.defaults = (options, requester) ->
  self = this
  wrap = (method) ->
    headerlessOptions = (options) ->
      options = extend({}, options)
      delete options.headers

      options

    getHeaders = (params, options) ->
      constructObject().extend(options.headers).extend(params.options.headers).done()

    (uri, opts, callback) ->
      params = initParams(uri, opts, callback)
      params.options = extend(headerlessOptions(options), params.options)
      params.options.headers = getHeaders(params, options)  if options.headers
      if isFunction(requester)
        if method is self
          method = requester
        else
          params.options._requester = requester
      method params.options, params.callback

  defaults = wrap(self)
  defaults.get = wrap(self.get)
  defaults.patch = wrap(self.patch)
  defaults.post = wrap(self.post)
  defaults.put = wrap(self.put)
  defaults.head = wrap(self.head)
  defaults.del = wrap(self.del)
  defaults.cookie = wrap(self.cookie)
  defaults.jar = self.jar
  defaults.defaults = self.defaults
  defaults

request.forever = (agentOptions, optionsArg) ->
  options = constructObject()
  options.extend optionsArg  if optionsArg
  options.agentOptions = agentOptions  if agentOptions
  options.extend forever: true
  request.defaults options.done()


# Exports
module.exports = request
request.Request = require("./request")
request.debug = process.env.NODE_DEBUG and /\brequest\b/.test(process.env.NODE_DEBUG)
request.initParams = initParams
