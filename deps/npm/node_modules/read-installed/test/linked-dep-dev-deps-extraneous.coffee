pjson = (dir, data) ->
  mkdirp.sync dir
  d = path.resolve(dir, "package.json")
  fs.writeFileSync d, JSON.stringify(data)
  return
test = require("tap").test
path = require("path")
fs = require("fs")
mkdirp = require("mkdirp")
rimraf = require("rimraf")
readInstalled = require("../")
root = path.resolve(__dirname, "root")
pkg = path.resolve(root, "pkg")
pkgnm = path.resolve(pkg, "node_modules")
linkdepSrc = path.resolve(root, "linkdep")
linkdepLink = path.resolve(pkgnm, "linkdep")
devdep = path.resolve(linkdepSrc, "node_modules", "devdep")
test "setup", (t) ->
  rimraf.sync root
  pjson pkg,
    name: "root"
    version: "1.2.3"
    dependencies:
      linkdep: ""

  pjson linkdepSrc,
    name: "linkdep"
    version: "1.2.3"
    devDependencies:
      devdep: ""

  pjson devdep,
    name: "devdep"
    version: "1.2.3"

  mkdirp.sync pkgnm
  fs.symlinkSync linkdepSrc, linkdepLink, "dir"
  t.end()
  return

test "basic", (t) ->
  readInstalled pkg,
    dev: true
  , (er, data) ->
    dd = data.dependencies.linkdep.dependencies.devdep
    t.notOk dd.extraneous, "linked dev dep should not be extraneous"
    t.end()
    return

  return

test "cleanup", (t) ->
  rimraf.sync root
  t.end()
  return

