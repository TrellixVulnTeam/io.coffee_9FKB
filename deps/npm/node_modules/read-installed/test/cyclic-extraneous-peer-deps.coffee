test = require("tap").test
mkdirp = require("mkdirp")
rimraf = require("rimraf")
fs = require("fs")
path = require("path")
readInstalled = require("../read-installed.js")
parent =
  name: "parent"
  version: "1.2.3"
  dependencies: {}
  devDependencies:
    child1: "*"

  readme: "."

child1 =
  name: "child1"
  version: "1.2.3"
  peerDependencies:
    child2: "*"

  readme: "."

child2 =
  name: "child2"
  version: "1.2.3"
  peerDependencies:
    child1: "*"

  readme: "."

root = path.resolve(__dirname, "cyclic-extraneous-peer-deps")
parentjson = path.resolve(root, "package.json")
child1root = path.resolve(root, "node_modules/child1")
child1json = path.resolve(child1root, "package.json")
child2root = path.resolve(root, "node_modules/child2")
child2json = path.resolve(child2root, "package.json")
test "setup", (t) ->
  rimraf.sync root
  mkdirp.sync child1root
  mkdirp.sync child2root
  fs.writeFileSync parentjson, JSON.stringify(parent, null, 2) + "\n", "utf8"
  fs.writeFileSync child1json, JSON.stringify(child1, null, 2) + "\n", "utf8"
  fs.writeFileSync child2json, JSON.stringify(child2, null, 2) + "\n", "utf8"
  t.pass "setup done"
  t.end()
  return

test "dev mode", (t) ->
  
  # peer dev deps should both be not extraneous.
  readInstalled root,
    dev: true
  , (er, data) ->
    throw er  if er
    t.notOk data.dependencies.child1.extraneous, "c1 not extra"
    t.notOk data.dependencies.child2.extraneous, "c2 not extra"
    t.end()
    return

  return

test "prod mode", (t) ->
  readInstalled root,
    dev: false
  , (er, data) ->
    throw er  if er
    t.ok data.dependencies.child1.extraneous, "c1 extra"
    t.ok data.dependencies.child2.extraneous, "c2 extra"
    t.end()
    return

  return

test "cleanup", (t) ->
  rimraf.sync root
  t.pass "cleanup done"
  t.end()
  return

