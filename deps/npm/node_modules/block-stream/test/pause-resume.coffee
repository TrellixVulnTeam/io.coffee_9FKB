BlockStream = require("../block-stream.js")
blockSizes = [16]
writeSizes = [
  15
  16
  17
]
writeCounts = [ #, 100]
  1
  10
]
tap = require("tap")
writeCounts.forEach (writeCount) ->
  blockSizes.forEach (blockSize) ->
    writeSizes.forEach (writeSize) ->
      tap.test "writeSize=" + writeSize + " blockSize=" + blockSize + " writeCount=" + writeCount, (t) ->
        f = new BlockStream(blockSize)
        actualChunks = 0
        actualBytes = 0
        timeouts = 0
        paused = false
        f.on "data", (c) ->
          timeouts++
          t.notOk paused, "should not be paused when emitting data"
          actualChunks++
          actualBytes += c.length
          
          # make sure that no data gets corrupted, and basic sanity
          before = c.toString()
          
          # simulate a slow write operation
          paused = true
          f.pause()
          process.nextTick ->
            after = c.toString()
            t.equal after, before, "should not change data"
            
            # now corrupt it, to find leaks.
            i = 0

            while i < c.length
              c[i] = "x".charCodeAt(0)
              i++
            paused = false
            f.resume()
            timeouts--
            return

          return

        f.on "end", ->
          
          # round up to the nearest block size
          expectChunks = Math.ceil(writeSize * writeCount * 2 / blockSize)
          expectBytes = expectChunks * blockSize
          t.equal actualBytes, expectBytes, "bytes=" + expectBytes + " writeSize=" + writeSize
          t.equal actualChunks, expectChunks, "chunks=" + expectChunks + " writeSize=" + writeSize
          
          # wait for all the timeout checks to finish, then end the test
          setTimeout (WAIT = ->
            return setTimeout(WAIT)  if timeouts > 0
            t.end()
            return
          ), 200
          return

        i = 0

        while i < writeCount
          a = new Buffer(writeSize)
          j = 0

          while j < writeSize
            a[j] = "a".charCodeAt(0)
            j++
          b = new Buffer(writeSize)
          j = 0

          while j < writeSize
            b[j] = "b".charCodeAt(0)
            j++
          f.write a
          f.write b
          i++
        f.end()
        return

      return

    return

  return

