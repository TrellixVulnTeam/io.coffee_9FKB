log = console.log
assert = require("assert")
BlockStream = require("../block-stream.js")
isize = 0
tsize = 0
fsize = 0
psize = 0
i = 0
filter = null
paper = null
stack = null

# a source data buffer
tsize = 1 * 1024 # <- 1K
stack = new Buffer(tsize)
while i < tsize
  stack[i] = "x".charCodeAt(0)
  i++
isize = 1 * 1024 # <- initial packet size with 4K no bug!
fsize = 2 * 1024 # <- first block-stream size
psize = Math.ceil(isize / 6) # <- second block-stream size
fexpected = Math.ceil(tsize / fsize) # <- packets expected for first
pexpected = Math.ceil(tsize / psize) # <- packets expected for second
filter = new BlockStream(fsize,
  nopad: true
)
paper = new BlockStream(psize,
  nopad: true
)
fcounter = 0
filter.on "data", (c) ->
  
  # verify that they're not null-padded
  i = 0

  while i < c.length
    assert.strictEqual c[i], "x".charCodeAt(0)
    i++
  ++fcounter
  return

pcounter = 0
paper.on "data", (c) ->
  
  # verify that they're not null-padded
  i = 0

  while i < c.length
    assert.strictEqual c[i], "x".charCodeAt(0)
    i++
  ++pcounter
  return

filter.pipe paper
filter.on "end", ->
  log "fcounter: %s === %s", fcounter, fexpected
  assert.strictEqual fcounter, fexpected
  return

paper.on "end", ->
  log "pcounter: %s === %s", pcounter, pexpected
  assert.strictEqual pcounter, pexpected
  return

i = 0
j = isize

while j <= tsize
  filter.write stack.slice(j - isize, j)
  j += isize
filter.end()
