
# some marker objects
PassThrough = ->
  Stream.call this
  @readable = @writable = true
  return
Stream = require("stream")
tap = require("tap")
MS = require("../mute.js")
END = {}
PAUSE = {}
RESUME = {}
PassThrough:: = Object.create(Stream::,
  constructor:
    value: PassThrough

  write:
    value: (c) ->
      @emit "data", c
      true

  end:
    value: (c) ->
      @write c  if c
      @emit "end"
      return

  pause:
    value: ->
      @emit "pause"
      return

  resume:
    value: ->
      @emit "resume"
      return
)
tap.test "incoming", (t) ->
  ms = new MS
  str = new PassThrough
  str.pipe ms
  expect = [
    "foo"
    "boo"
    END
  ]
  ms.on "data", (c) ->
    t.equal c, expect.shift()
    return

  ms.on "end", ->
    t.equal END, expect.shift()
    t.end()
    return

  str.write "foo"
  ms.mute()
  str.write "bar"
  ms.unmute()
  str.write "boo"
  ms.mute()
  str.write "blaz"
  str.end "grelb"
  return

tap.test "outgoing", (t) ->
  ms = new MS
  str = new PassThrough
  ms.pipe str
  expect = [
    "foo"
    "boo"
    END
  ]
  str.on "data", (c) ->
    t.equal c, expect.shift()
    return

  str.on "end", ->
    t.equal END, expect.shift()
    t.end()
    return

  ms.write "foo"
  ms.mute()
  ms.write "bar"
  ms.unmute()
  ms.write "boo"
  ms.mute()
  ms.write "blaz"
  ms.end "grelb"
  return

tap.test "isTTY", (t) ->
  str = new PassThrough
  str.isTTY = true
  str.columns = 80
  str.rows = 24
  ms = new MS
  t.equal ms.isTTY, false
  t.equal ms.columns, `undefined`
  t.equal ms.rows, `undefined`
  ms.pipe str
  t.equal ms.isTTY, true
  t.equal ms.columns, 80
  t.equal ms.rows, 24
  str.isTTY = false
  t.equal ms.isTTY, false
  t.equal ms.columns, 80
  t.equal ms.rows, 24
  str.isTTY = true
  t.equal ms.isTTY, true
  t.equal ms.columns, 80
  t.equal ms.rows, 24
  ms.isTTY = false
  t.equal ms.isTTY, false
  t.equal ms.columns, 80
  t.equal ms.rows, 24
  ms = new MS
  t.equal ms.isTTY, false
  str.pipe ms
  t.equal ms.isTTY, true
  str.isTTY = false
  t.equal ms.isTTY, false
  str.isTTY = true
  t.equal ms.isTTY, true
  ms.isTTY = false
  t.equal ms.isTTY, false
  t.end()
  return

tap.test "pause/resume incoming", (t) ->
  str = new PassThrough
  ms = new MS
  str.on "pause", ->
    t.equal PAUSE, expect.shift()
    return

  str.on "resume", ->
    t.equal RESUME, expect.shift()
    return

  expect = [
    PAUSE
    RESUME
    PAUSE
    RESUME
  ]
  str.pipe ms
  ms.pause()
  ms.resume()
  ms.pause()
  ms.resume()
  t.equal expect.length, 0, "saw all events"
  t.end()
  return

tap.test "replace with *", (t) ->
  str = new PassThrough
  ms = new MS(replace: "*")
  str.pipe ms
  expect = [
    "foo"
    "*****"
    "bar"
    "***"
    "baz"
    "boo"
    "**"
    "****"
  ]
  ms.on "data", (c) ->
    t.equal c, expect.shift()
    return

  str.write "foo"
  ms.mute()
  str.write "12345"
  ms.unmute()
  str.write "bar"
  ms.mute()
  str.write "baz"
  ms.unmute()
  str.write "baz"
  str.write "boo"
  ms.mute()
  str.write "xy"
  str.write "xyzΩ"
  t.equal expect.length, 0
  t.end()
  return

tap.test "replace with ~YARG~", (t) ->
  str = new PassThrough
  ms = new MS(replace: "~YARG~")
  str.pipe ms
  expect = [
    "foo"
    "~YARG~~YARG~~YARG~~YARG~~YARG~"
    "bar"
    "~YARG~~YARG~~YARG~"
    "baz"
    "boo"
    "~YARG~~YARG~"
    "~YARG~~YARG~~YARG~~YARG~"
  ]
  ms.on "data", (c) ->
    t.equal c, expect.shift()
    return

  
  # also throw some unicode in there, just for good measure.
  str.write "foo"
  ms.mute()
  str.write "ΩΩ"
  ms.unmute()
  str.write "bar"
  ms.mute()
  str.write "Ω"
  ms.unmute()
  str.write "baz"
  str.write "boo"
  ms.mute()
  str.write "Ω"
  str.write "ΩΩ"
  t.equal expect.length, 0
  t.end()
  return

