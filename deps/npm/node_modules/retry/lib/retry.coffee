RetryOperation = require("./retry_operation")
exports.operation = (options) ->
  timeouts = exports.timeouts(options)
  new RetryOperation(timeouts)

exports.timeouts = (options) ->
  return [].concat(options)  if options instanceof Array
  opts =
    retries: 10
    factor: 2
    minTimeout: 1 * 1000
    maxTimeout: Infinity
    randomize: false

  for key of options
    opts[key] = options[key]
  throw new Error("minTimeout is greater than maxTimeout")  if opts.minTimeout > opts.maxTimeout
  timeouts = []
  i = 0

  while i < opts.retries
    timeouts.push @_createTimeout(i, opts)
    i++
  
  # sort the array numerically ascending
  timeouts.sort (a, b) ->
    a - b

  timeouts

exports._createTimeout = (attempt, opts) ->
  random = (if (opts.randomize) then (Math.random() + 1) else 1)
  timeout = Math.round(random * opts.minTimeout * Math.pow(opts.factor, attempt))
  timeout = Math.min(timeout, opts.maxTimeout)
  timeout
