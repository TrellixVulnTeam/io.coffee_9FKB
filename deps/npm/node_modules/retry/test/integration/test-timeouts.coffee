common = require("../common")
assert = common.assert
retry = require(common.dir.lib + "/retry")
(testDefaultValues = ->
  timeouts = retry.timeouts()
  assert.equal timeouts.length, 10
  assert.equal timeouts[0], 1000
  assert.equal timeouts[1], 2000
  assert.equal timeouts[2], 4000
  return
)()
(testDefaultValuesWithRandomize = ->
  minTimeout = 5000
  timeouts = retry.timeouts(
    minTimeout: minTimeout
    randomize: true
  )
  assert.equal timeouts.length, 10
  assert.ok timeouts[0] > minTimeout
  assert.ok timeouts[1] > timeouts[0]
  assert.ok timeouts[2] > timeouts[1]
  return
)()
(testPassedTimeoutsAreUsed = ->
  timeoutsArray = [
    1000
    2000
    3000
  ]
  timeouts = retry.timeouts(timeoutsArray)
  assert.deepEqual timeouts, timeoutsArray
  assert.notStrictEqual timeouts, timeoutsArray
  return
)()
(testTimeoutsAreWithinBoundaries = ->
  minTimeout = 1000
  maxTimeout = 10000
  timeouts = retry.timeouts(
    minTimeout: minTimeout
    maxTimeout: maxTimeout
  )
  i = 0

  while i < timeouts
    assert.ok timeouts[i] >= minTimeout
    assert.ok timeouts[i] <= maxTimeout
    i++
  return
)()
(testTimeoutsAreIncremental = ->
  timeouts = retry.timeouts()
  lastTimeout = timeouts[0]
  i = 0

  while i < timeouts
    assert.ok timeouts[i] > lastTimeout
    lastTimeout = timeouts[i]
    i++
  return
)()
(testTimeoutsAreIncrementalForFactorsLessThanOne = ->
  timeouts = retry.timeouts(
    retries: 3
    factor: 0.5
  )
  expected = [
    250
    500
    1000
  ]
  assert.deepEqual expected, timeouts
  return
)()
(testRetries = ->
  timeouts = retry.timeouts(retries: 2)
  assert.strictEqual timeouts.length, 2
  return
)()
