common = require("../common")
assert = common.assert
fake = common.fake.create()
retry = require(common.dir.lib + "/retry")
(testErrors = ->
  operation = retry.operation()
  error = new Error("some error")
  error2 = new Error("some other error")
  operation._errors.push error
  operation._errors.push error2
  assert.deepEqual operation.errors(), [
    error
    error2
  ]
  return
)()
(testMainErrorReturnsMostFrequentError = ->
  operation = retry.operation()
  error = new Error("some error")
  error2 = new Error("some other error")
  operation._errors.push error
  operation._errors.push error2
  operation._errors.push error
  assert.strictEqual operation.mainError(), error
  return
)()
(testMainErrorReturnsLastErrorOnEqualCount = ->
  operation = retry.operation()
  error = new Error("some error")
  error2 = new Error("some other error")
  operation._errors.push error
  operation._errors.push error2
  assert.strictEqual operation.mainError(), error2
  return
)()
(testAttempt = ->
  operation = retry.operation()
  fn = new Function()
  timeoutOpts =
    timeout: 1
    cb: ->

  operation.attempt fn, timeoutOpts
  assert.strictEqual fn, operation._fn
  assert.strictEqual timeoutOpts.timeout, operation._operationTimeout
  assert.strictEqual timeoutOpts.cb, operation._operationTimeoutCb
  return
)()
(testRetry = ->
  times = 3
  error = new Error("some error")
  operation = retry.operation([
    1
    2
    3
  ])
  attempts = 0
  finalCallback = fake.callback("finalCallback")
  fake.expectAnytime finalCallback
  fn = ->
    operation.attempt (currentAttempt) ->
      attempts++
      assert.equal currentAttempt, attempts
      return  if operation.retry(error)
      assert.strictEqual attempts, 4
      assert.strictEqual operation.attempts(), attempts
      assert.strictEqual operation.mainError(), error
      finalCallback()
      return

    return

  fn()
  return
)()
