tap = require("tap")
fs = require("fs")
path = require("path")
globals = Object.keys(global)
normalize = require("../lib/normalize")
warningMessages = require("../lib/warning_messages.json")
safeFormat = require("../lib/safe_format")
rpjPath = path.resolve(__dirname, "./fixtures/read-package-json.json")
tap.test "normalize some package data", (t) ->
  packageData = require(rpjPath)
  warnings = []
  normalize packageData, (warning) ->
    warnings.push warning
    return

  
  # there's no readme data in this particular object
  t.equal warnings.length, 1, "There's exactly one warning."
  fs.readFile rpjPath, (err, data) ->
    throw err  if err
    
    # Various changes have been made
    t.notEqual packageData, JSON.parse(data), "Output is different from input."
    t.end()
    return

  return

tap.test "runs without passing warning function", (t) ->
  packageData = require(rpjPath)
  fs.readFile rpjPath, (err, data) ->
    throw err  if err
    normalize JSON.parse(data)
    t.ok true, "If you read this, this means I'm still alive."
    t.end()
    return

  return

tap.test "empty object", (t) ->
  warn = (m) ->
    warnings.push m
    return
  packageData = {}
  expect =
    name: ""
    version: ""
    readme: "ERROR: No README data found!"
    _id: "@"

  warnings = []
  normalize packageData, warn
  t.same packageData, expect
  t.same warnings, [
    warningMessages.missingDescription
    warningMessages.missingRepository
    warningMessages.missingReadme
  ]
  t.end()
  return

tap.test "core module name", (t) ->
  warn = (m) ->
    warnings.push m
    return
  warnings = []
  a = undefined
  normalize a =
    name: "http"
    readme: "read yourself how about"
    homepage: 123
    bugs: "what is this i don't even"
    repository: "Hello."
  , warn
  expect = [
    safeFormat(warningMessages.conflictingName, "http")
    warningMessages.nonEmailUrlBugsString
    warningMessages.emptyNormalizedBugs
    warningMessages.nonUrlHomepage
  ]
  t.same warnings, expect
  t.end()
  return

tap.test "urls required", (t) ->
  warn = (w) ->
    warnings.push w
    return
  warnings = []
  normalize
    bugs:
      url: "/1"
      email: "not an email address"
  , warn
  a = undefined
  normalize a =
    readme: "read yourself how about"
    homepage: 123
    bugs: "what is this i don't even"
    repository: "Hello."
  , warn
  console.error a
  expect = [
    warningMessages.missingDescription
    warningMessages.missingRepository
    warningMessages.nonUrlBugsUrlField
    warningMessages.nonEmailBugsEmailField
    warningMessages.emptyNormalizedBugs
    warningMessages.missingReadme
    warningMessages.nonEmailUrlBugsString
    warningMessages.emptyNormalizedBugs
    warningMessages.nonUrlHomepage
  ]
  t.same warnings, expect
  t.end()
  return

tap.test "homepage field must start with a protocol.", (t) ->
  warn = (w) ->
    warnings.push w
    return
  warnings = []
  a = undefined
  normalize a = homepage: "example.org", warn
  console.error a
  expect = [
    warningMessages.missingDescription
    warningMessages.missingRepository
    warningMessages.missingReadme
    warningMessages.missingProtocolHomepage
  ]
  t.same warnings, expect
  t.same a.homepage, "http://example.org"
  t.end()
  return

tap.test "gist bugs url", (t) ->
  d = repository: "git@gist.github.com:123456.git"
  normalize d
  t.same d.repository,
    type: "git"
    url: "git@gist.github.com:123456.git"

  t.same d.bugs,
    url: "https://gist.github.com/123456"

  t.end()
  return

tap.test "singularize repositories", (t) ->
  d = repositories: ["git@gist.github.com:123456.git"]
  normalize d
  t.same d.repository,
    type: "git"
    url: "git@gist.github.com:123456.git"

  t.end()
  return

tap.test "treat visionmedia/express as github repo", (t) ->
  d = repository:
    type: "git"
    url: "visionmedia/express"

  normalize d
  t.same d.repository,
    type: "git"
    url: "https://github.com/visionmedia/express"

  t.end()
  return

tap.test "treat isaacs/node-graceful-fs as github repo", (t) ->
  d = repository:
    type: "git"
    url: "isaacs/node-graceful-fs"

  normalize d
  t.same d.repository,
    type: "git"
    url: "https://github.com/isaacs/node-graceful-fs"

  t.end()
  return

tap.test "homepage field will set to github url if repository is a github repo", (t) ->
  a = undefined
  normalize a = repository:
    type: "git"
    url: "https://github.com/isaacs/node-graceful-fs"

  t.same a.homepage, "https://github.com/isaacs/node-graceful-fs"
  t.end()
  return

tap.test "homepage field will set to github gist url if repository is a gist", (t) ->
  a = undefined
  normalize a = repository:
    type: "git"
    url: "git@gist.github.com:123456.git"

  t.same a.homepage, "https://gist.github.com/123456"
  t.end()
  return

tap.test "homepage field will set to github gist url if repository is a shorthand reference", (t) ->
  a = undefined
  normalize a = repository:
    type: "git"
    url: "sindresorhus/chalk"

  t.same a.homepage, "https://github.com/sindresorhus/chalk"
  t.end()
  return

tap.test "treat isaacs/node-graceful-fs as github repo in dependencies", (t) ->
  d = dependencies:
    "node-graceful-fs": "isaacs/node-graceful-fs"

  normalize d
  t.same d.dependencies,
    "node-graceful-fs": "git+https://github.com/isaacs/node-graceful-fs"

  t.end()
  return

tap.test "deprecation warning for array in dependencies fields", (t) ->
  warn = (w) ->
    warnings.push w
    return
  a = undefined
  warnings = []
  normalize a =
    dependencies: []
    devDependencies: []
    optionalDependencies: []
  , warn
  t.ok ~warnings.indexOf(safeFormat(warningMessages.deprecatedArrayDependencies, "dependencies")), "deprecation warning"
  t.ok ~warnings.indexOf(safeFormat(warningMessages.deprecatedArrayDependencies, "devDependencies")), "deprecation warning"
  t.ok ~warnings.indexOf(safeFormat(warningMessages.deprecatedArrayDependencies, "optionalDependencies")), "deprecation warning"
  t.end()
  return

tap.test "no new globals", (t) ->
  t.same Object.keys(global), globals
  t.end()
  return

