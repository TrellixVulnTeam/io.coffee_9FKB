EntryWriter = (props) ->
  me = this
  return new EntryWriter(props)  unless me instanceof EntryWriter
  Stream.apply this
  me.writable = true
  me.readable = true
  me._stream = new BlockStream(512)
  me._stream.on "data", (c) ->
    me.emit "data", c
    return

  me._stream.on "drain", ->
    me.emit "drain"
    return

  me._stream.on "end", ->
    me.emit "end"
    me.emit "close"
    return

  me.props = props
  props.size = 0  if props.type is "Directory"
  props.ustar = "ustar\u0000"
  props.ustarver = "00"
  me.path = props.path
  me._buffer = []
  me._didHeader = false
  me._meta = false
  me.on "pipe", ->
    me._process()
    return

  return
module.exports = EntryWriter
tar = require("../tar.js")
TarHeader = require("./header.js")
Entry = require("./entry.js")
inherits = require("inherits")
BlockStream = require("block-stream")
ExtendedHeaderWriter = undefined
Stream = require("stream").Stream
EOF = {}
inherits EntryWriter, Stream
EntryWriter::write = (c) ->
  
  # console.error(".. ew write")
  return @emit("error", new Error("write after end"))  if @_ended
  @_buffer.push c
  @_process()
  @_needDrain = @_buffer.length > 0
  not @_needDrain

EntryWriter::end = (c) ->
  
  # console.error(".. ew end")
  @_buffer.push c  if c
  @_buffer.push EOF
  @_ended = true
  @_process()
  @_needDrain = @_buffer.length > 0
  return

EntryWriter::pause = ->
  
  # console.error(".. ew pause")
  @_paused = true
  @emit "pause"
  return

EntryWriter::resume = ->
  
  # console.error(".. ew resume")
  @_paused = false
  @emit "resume"
  @_process()
  return

EntryWriter::add = (entry) ->
  
  # console.error(".. ew add")
  return @emit("error", new Error("no parent"))  unless @parent
  
  # make sure that the _header and such is emitted, and clear out
  # the _currentEntry link on the parent.
  @end()  unless @_ended
  @parent.add entry

EntryWriter::_header = ->
  
  # console.error(".. ew header")
  return @_didHeader = true  if @_didHeader
  headerBlock = TarHeader.encode(@props)
  if @props.needExtended and not @_meta
    me = this
    ExtendedHeaderWriter = ExtendedHeaderWriter or require("./extended-header-writer.js")
    ExtendedHeaderWriter(@props).on("data", (c) ->
      me.emit "data", c
      return
    ).on("error", (er) ->
      me.emit "error", er
      return
    ).end()
  
  # console.error(".. .. ew headerBlock emitting")
  @emit "data", headerBlock
  @emit "header"
  return

EntryWriter::_process = ->
  
  # console.error(".. .. ew process")
  @_header()  if not @_didHeader and not @_meta
  
  # console.error(".. .. .. paused=%j, processing=%j", this._paused, this._processing)
  return  if @_paused or @_processing
  @_processing = true
  buf = @_buffer
  i = 0

  while i < buf.length
    
    # console.error(".. .. .. i=%d", i)
    c = buf[i]
    if c is EOF
      @_stream.end()
    else
      @_stream.write c
    if @_paused
      
      # console.error(".. .. .. paused mid-emission")
      @_processing = false
      if i < buf.length
        @_needDrain = true
        @_buffer = buf.slice(i + 1)
      return
    i++
  
  # console.error(".. .. .. emitted")
  @_buffer.length = 0
  @_processing = false
  
  # console.error(".. .. .. emitting drain")
  @emit "drain"
  return

EntryWriter::destroy = ->
