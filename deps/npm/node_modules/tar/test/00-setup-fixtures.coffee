# the fixtures have some weird stuff that is painful
# to include directly in the repo for various reasons.
#
# So, unpack the fixtures with the system tar first.
#
# This means, of course, that it'll only work if you
# already have a tar implementation, and some of them
# will not properly unpack the fixtures anyway.
#
# But, since usually those tests will fail on Windows
# and other systems with less capable filesystems anyway,
# at least this way we don't cause inconveniences by
# merely cloning the repo or installing the package.
tap = require("tap")
child_process = require("child_process")
rimraf = require("rimraf")
test = tap.test
path = require("path")
test "clean fixtures", (t) ->
  rimraf path.resolve(__dirname, "fixtures"), (er) ->
    t.ifError er, "rimraf ./fixtures/"
    t.end()
    return

  return

test "clean tmp", (t) ->
  rimraf path.resolve(__dirname, "tmp"), (er) ->
    t.ifError er, "rimraf ./tmp/"
    t.end()
    return

  return

test "extract fixtures", (t) ->
  errwrite = (chunk) ->
    process.stderr.write chunk
    return
  c = child_process.spawn("tar", [
    "xzvf"
    "fixtures.tgz"
  ],
    cwd: __dirname
  )
  c.stdout.on "data", errwrite
  c.stderr.on "data", errwrite
  c.on "exit", (code) ->
    t.equal code, 0, "extract fixtures should exit with 0"
    t.comment "Note, all tests from here on out will fail because of this."  if code
    t.end()
    return

  return

