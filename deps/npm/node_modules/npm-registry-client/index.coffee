# utilities for working with the js-registry site.
noop = ->
RegClient = (conf) ->
  
  # accept either a plain-jane object, or a npmconf object
  # with a "get" method.
  if typeof conf.get isnt "function"
    data = conf
    conf =
      get: (k) ->
        data[k]

      set: (k, v) ->
        data[k] = v
        return

      del: (k) ->
        delete data[k]

        return
  @conf = conf
  
  # if provided, then the registry needs to be a url.
  # if it's not provided, then we're just using the cache only.
  registry = conf.get("registry")
  if registry
    registry = url.parse(registry)
    throw new Error("Invalid registry: " + registry.url)  unless registry.protocol
    registry = registry.href
    registry += "/"  if registry.slice(-1) isnt "/"
    @conf.set "registry", registry
  else
    registry = null
  @registry = registry
  throw new Error("Cache dir is required")  unless conf.get("cache")
  @cacheFile = cacheFile(@conf.get("cache"))
  @log = conf.log or conf.get("log") or npmlog
  return
module.exports = RegClient
url = require("url")
npmlog = undefined
cacheFile = require("npm-cache-filename")
try
  npmlog = require("npmlog")
catch er
  npmlog =
    error: noop
    warn: noop
    info: noop
    verbose: noop
    silly: noop
    http: noop
    pause: noop
    resume: noop
require("fs").readdirSync(__dirname + "/lib").forEach (f) ->
  RegClient::[f.replace(/\.js$/, "")] = require("./lib/" + f)  unless f.match(/\.js$/)

