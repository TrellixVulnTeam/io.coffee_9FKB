tap = require("tap")
fs = require("fs")
server = require("./lib/server.js")
common = require("./lib/common.js")
nerfed = "//localhost:" + server.port + "/:"
configuration = {}
configuration[nerfed + "username"] = "username"
configuration[nerfed + "_password"] = new Buffer("%1234@asdf%").toString("base64")
configuration[nerfed + "email"] = "i@izs.me"
client = common.freshClient(configuration)
tap.test "publish again", (t) ->
  
  # not really a tarball, but doesn't matter
  tarball = require.resolve("../package.json")
  pd = fs.readFileSync(tarball, "base64")
  pkg = require("../package.json")
  lastTime = null
  server.expect "/@npm%2fnpm-registry-client", (req, res) ->
    t.equal req.method, "PUT"
    b = ""
    req.setEncoding "utf8"
    req.on "data", (d) ->
      b += d
      return

    req.on "end", ->
      o = lastTime = JSON.parse(b)
      t.equal o._id, "@npm/npm-registry-client"
      t.equal o["dist-tags"].latest, pkg.version
      t.has o.versions[pkg.version], pkg
      t.same o.maintainers, [
        name: "username"
        email: "i@izs.me"
      ]
      att = o._attachments[pkg.name + "-" + pkg.version + ".tgz"]
      t.same att.data, pd
      res.statusCode = 409
      res.json reason: "must supply latest _rev to update existing package"
      return

    return

  server.expect "/@npm%2fnpm-registry-client?write=true", (req, res) ->
    t.equal req.method, "GET"
    t.ok lastTime
    for i of lastTime.versions
      v = lastTime.versions[i]
      delete lastTime.versions[i]

      lastTime.versions["0.0.2"] = v
      lastTime["dist-tags"] = latest: "0.0.2"
    lastTime._rev = "asdf"
    res.json lastTime
    return

  server.expect "/@npm%2fnpm-registry-client", (req, res) ->
    t.equal req.method, "PUT"
    t.ok lastTime
    b = ""
    req.setEncoding "utf8"
    req.on "data", (d) ->
      b += d
      return

    req.on "end", ->
      o = JSON.parse(b)
      t.equal o._rev, "asdf"
      t.deepEqual o.versions["0.0.2"], o.versions[pkg.version]
      res.statusCode = 201
      res.json created: true
      return

    return

  pkg.name = "@npm/npm-registry-client"
  client.publish "http://localhost:1337/", pkg, tarball, (er, data) ->
    throw er  if er
    t.deepEqual data,
      created: true

    t.end()
    return

  return

