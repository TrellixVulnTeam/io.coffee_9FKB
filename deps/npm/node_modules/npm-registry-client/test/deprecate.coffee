tap = require("tap")
server = require("./lib/server.js")
common = require("./lib/common.js")
nerfed = "//localhost:" + server.port + "/:"
configuration = {}
configuration[nerfed + "_authToken"] = "not-bad-meaning-bad-but-bad-meaning-wombat"
client = common.freshClient(configuration)
cache = require("./fixtures/underscore/cache.json")
VERSION = "1.3.2"
MESSAGE = "uhhh"
tap.test "deprecate a package", (t) ->
  server.expect "GET", "/underscore?write=true", (req, res) ->
    t.equal req.method, "GET"
    res.json cache
    return

  server.expect "PUT", "/underscore", (req, res) ->
    t.equal req.method, "PUT"
    b = ""
    req.setEncoding "utf8"
    req.on "data", (d) ->
      b += d
      return

    req.on "end", ->
      updated = JSON.parse(b)
      undeprecated = [
        "1.0.3"
        "1.0.4"
        "1.1.0"
        "1.1.1"
        "1.1.2"
        "1.1.3"
        "1.1.4"
        "1.1.5"
        "1.1.6"
        "1.1.7"
        "1.2.0"
        "1.2.1"
        "1.2.2"
        "1.2.3"
        "1.2.4"
        "1.3.0"
        "1.3.1"
        "1.3.3"
      ]
      i = 0

      while i < undeprecated.length
        current = undeprecated[i]
        t.notEqual updated.versions[current].deprecated, MESSAGE, current + " not deprecated"
        i++
      t.equal updated.versions[VERSION].deprecated, MESSAGE, VERSION + " deprecated"
      res.statusCode = 201
      res.json deprecated: true
      return

    return

  client.deprecate common.registry + "/underscore", VERSION, MESSAGE, (er, data) ->
    t.ifError er
    t.ok data.deprecated, "was deprecated"
    t.end()
    return

  return

