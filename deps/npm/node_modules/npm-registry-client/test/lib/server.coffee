# a fake registry server.
handler = (req, res) ->
  req.connection.setTimeout 1000
  
  # If we got authorization, make sure it's the right password.
  if req.headers.authorization and req.headers.authorization.match(/^Basic/)
    auth = req.headers.authorization.replace(/^Basic /, "")
    auth = new Buffer(auth, "base64").toString("utf8")
    assert.equal auth, "username:%1234@asdf%"
  u = "* " + req.url
  mu = req.method + " " + req.url
  k = (if server._expect[mu] then mu else (if server._expect[u] then u else null))
  throw Error("unexpected request: " + req.method + " " + req.url)  unless k
  fn = server._expect[k].shift()
  throw Error("unexpected request" + req.method + " " + req.url)  unless fn
  remain = (Object.keys(server._expect).reduce((s, k) ->
    s + server._expect[k].length
  , 0))
  if remain is 0
    server.close()
  else
    @log.info "fake-registry", "TEST SERVER: %d reqs remain", remain
  @log.info "fake-registry", Object.keys(server._expect).map((k) ->
    [
      k
      server._expect[k].length
    ]
  ).reduce((acc, kv) ->
    acc[kv[0]] = kv[1]
    acc
  , {})
  res.json = json
  fn req, res
  return
json = (o) ->
  @setHeader "content-type", "application/json"
  @end JSON.stringify(o)
  return
http = require("http")
server = http.createServer(handler)
port = server.port = process.env.PORT or 1337
assert = require("assert")
server.listen port
module.exports = server
server._expect = {}

# this log is meanto to be overridden
server.log = require("npmlog")
server.expect = (method, u, fn) ->
  if typeof u is "function"
    fn = u
    u = method
    method = "*"
  u = method + " " + u
  server._expect[u] = server._expect[u] or []
  server._expect[u].push fn
  return
