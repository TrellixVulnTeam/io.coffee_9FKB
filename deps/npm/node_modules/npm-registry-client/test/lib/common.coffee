resolve = require("path").resolve
server = require("./server.js")
RC = require("../../")
toNerfDart = require("../../lib/util/nerf-dart.js")
REGISTRY = "http://localhost:" + server.port
module.exports =
  port: server.port
  registry: REGISTRY
  freshClient: freshClient = (config) ->
    config = config or {}
    config.cache = resolve(__dirname, "../fixtures/cache")
    config.registry = REGISTRY
    container =
      get: (k) ->
        config[k]

      set: (k, v) ->
        config[k] = v
        return

      del: (k) ->
        delete config[k]

        return

      getCredentialsByURI: (uri) ->
        nerfed = toNerfDart(uri)
        c = scope: nerfed
        if @get(nerfed + ":_authToken")
          c.token = @get(nerfed + ":_authToken")
          
          # the bearer token is enough, don't confuse things
          return c
        c.password = new Buffer(@get(nerfed + ":_password"), "base64").toString("utf8")  if @get(nerfed + ":_password")
        c.username = @get(nerfed + ":username")  if @get(nerfed + ":username")
        c.email = @get(nerfed + ":email")  if @get(nerfed + ":email")
        c.alwaysAuth = @get(nerfed + ":always-auth")  if @get(nerfed + ":always-auth") isnt `undefined`
        c.auth = new Buffer(c.username + ":" + c.password).toString("base64")  if c.username and c.password
        c

      setCredentialsByURI: (uri, c) ->
        nerfed = toNerfDart(uri)
        if c.token
          @set nerfed + ":_authToken", c.token, "user"
          @del nerfed + ":_password", "user"
          @del nerfed + ":username", "user"
          @del nerfed + ":email", "user"
        else if c.username or c.password or c.email
          @del nerfed + ":_authToken", "user"
          encoded = new Buffer(c.password, "utf8").toString("base64")
          @set nerfed + ":_password", encoded, "user"
          @set nerfed + ":username", c.username, "user"
          @set nerfed + ":email", c.email, "user"
        else
          throw new Error("No credentials to set.")
        return

    client = new RC(container)
    server.log = client.log
    client.log.level = "silent"
    client
