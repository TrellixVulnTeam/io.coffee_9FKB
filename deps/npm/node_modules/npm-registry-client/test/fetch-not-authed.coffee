resolve = require("path").resolve
createReadStream = require("graceful-fs").createReadStream
readFileSync = require("graceful-fs").readFileSync
tap = require("tap")
cat = require("concat-stream")
server = require("./lib/server.js")
common = require("./lib/common.js")
tgz = resolve(__dirname, "./fixtures/underscore/1.3.3/package.tgz")
tap.test "basic fetch with scoped always-auth disabled", (t) ->
  server.expect "/underscore/-/underscore-1.3.3.tgz", (req, res) ->
    t.equal req.method, "GET", "got expected method"
    t.notOk req.headers.authorization, "received no auth header"
    res.writeHead 200,
      "content-type": "application/x-tar"
      "content-encoding": "gzip"

    createReadStream(tgz).pipe res
    return

  nerfed = "//localhost:" + server.port + "/:"
  configuration = {}
  configuration[nerfed + "username"] = "username"
  configuration[nerfed + "_password"] = new Buffer("%1234@asdf%").toString("base64")
  configuration[nerfed + "email"] = "i@izs.me"
  configuration[nerfed + "always-auth"] = false
  client = common.freshClient(configuration)
  client.fetch "http://localhost:1337/underscore/-/underscore-1.3.3.tgz", null, (er, res) ->
    t.ifError er, "loaded successfully"
    sink = cat((data) ->
      t.deepEqual data, readFileSync(tgz)
      t.end()
      return
    )
    res.on "error", (error) ->
      t.ifError error, "no errors on stream"
      return

    res.pipe sink
    return

  return

