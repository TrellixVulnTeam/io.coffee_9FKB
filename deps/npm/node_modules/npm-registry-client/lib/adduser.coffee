adduser = (base, username, password, email, cb) ->
  
  # pluck off any other username/password/token.  it needs to be the
  # same as the user we're becoming now.  replace them on error.
  
  # if it worked, then we just created a new user, and all is well.
  # but if we're updating a current record, then it'll 409 first
  
  # must be trying to re-auth on a new machine.
  # use this info as auth
  done = (cb, pre) ->
    
    # there was some kind of error, re-instate previous auth/token/etc.
    ((error, data, json, response) ->
      return cb(error, data, json, response)  if not error and (not response or response.statusCode is 201)
      @conf.set "_token", pre.token
      if @couchLogin
        @couchLogin.token = pre.token
        @couchLogin.tokenSet pre.token  if @couchLogin.tokenSet
      @conf.setCredentialsByURI base,
        username: pre.username
        password: pre.password
        email: pre.email

      @log.verbose "adduser", "back", [
        error
        data
        json
      ]
      error = new Error((response and response.statusCode or "") + " " + "Could not create user\n" + JSON.stringify(data))  unless error
      @log.warn "adduser", "Incorrect username or password\n" + "You can reset your account by visiting:\n" + "\n" + "    https://npmjs.org/forgot\n"  if response and (response.statusCode is 401 or response.statusCode is 403)
      cb error
    ).bind this
  return cb(new Error("Required base URI not supplied"))  unless base
  username = ("" + (username or "")).trim()
  return cb(new Error("No username supplied."))  unless username
  password = ("" + (password or "")).trim()
  return cb(new Error("No password supplied."))  unless password
  email = ("" + (email or "")).trim()
  return cb(new Error("No email address supplied."))  unless email
  return cb(new Error("Please use a real email address."))  unless email.match(/^[^@]+@[^\.]+\.[^\.]+/)
  userobj =
    name: username
    password: password
    email: email
    _id: "org.couchdb.user:" + username
    type: "user"
    roles: []
    date: new Date().toISOString()

  c = @conf.getCredentialsByURI(base)
  pre =
    username: c.username
    password: c.password
    email: c.email
    token: @conf.get("_token")

  @conf.del "_token"
  @couchLogin.token = null  if @couchLogin
  cb = done.call(this, cb, pre)
  logObj = Object.keys(userobj).map((k) ->
    if k is "password"
      return [
        k
        "XXXXX"
      ]
    [
      k
      userobj[k]
    ]
  ).reduce((s, kv) ->
    s[kv[0]] = kv[1]
    s
  , {})
  @log.verbose "adduser", "before first PUT", logObj
  uri = url.resolve(base, "/-/user/org.couchdb.user:" + encodeURIComponent(username))
  @request "PUT", uri,
    body: userobj
  , ((error, data, json, response) ->
    c = @conf.getCredentialsByURI(base)
    if error and not c.auth
      @conf.setCredentialsByURI base,
        username: username
        password: password
        email: email

    return cb(error, data, json, response)  if not error or not response or response.statusCode isnt 409
    @log.verbose "adduser", "update existing user"
    @request "GET", uri + "?write=true", null, ((er, data, json, response) ->
      return cb(er, data, json, response)  if er or data.error
      Object.keys(data).forEach (k) ->
        userobj[k] = data[k]  if not userobj[k] or k is "roles"
        return

      @log.verbose "adduser", "userobj", logObj
      @request "PUT", uri + "/-rev/" + userobj._rev,
        body: userobj
      , cb
      return
    ).bind(this)
  ).bind(this)
  return
module.exports = adduser
url = require("url")
