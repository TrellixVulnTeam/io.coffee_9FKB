req = (key, cb) ->
  cb = inf(key, cb)
  if cb
    setTimeout ->
      cb key
      cb key
      return

  cb
test = require("tap").test
inf = require("./inflight.js")
test "basic", (t) ->
  calleda = false
  a = req("key", (k) ->
    t.notOk calleda
    calleda = true
    t.equal k, "key"
    t.end()  if calledb
    return
  )
  t.ok a, "first returned cb function"
  calledb = false
  b = req("key", (k) ->
    t.notOk calledb
    calledb = true
    t.equal k, "key"
    t.end()  if calleda
    return
  )
  t.notOk b, "second should get falsey inflight response"
  return

test "timing", (t) ->
  log = (m) ->
    t.equal m, expect[i], m + " === " + expect[i]
    ++i
    t.end()  if i is expect.length
    return
  method = (name, cb) ->
    log "method " + name
    process.nextTick cb
    return
  expect = [
    "method one"
    "start one"
    "end one"
    "two"
    "tick"
    "three"
  ]
  i = 0
  one = inf("foo", ->
    log "start one"
    three = inf("foo", ->
      log "three"
      return
    )
    method "three", three  if three
    log "end one"
    return
  )
  method "one", one
  two = inf("foo", ->
    log "two"
    return
  )
  method "one", two  if two
  process.nextTick log.bind(null, "tick")
  return

test "parameters", (t) ->
  t.plan 8
  a = inf("key", (first, second, third) ->
    t.equal first, 1
    t.equal second, 2
    t.equal third, 3
    return
  )
  t.ok a, "first returned cb function"
  b = inf("key", (first, second, third) ->
    t.equal first, 1
    t.equal second, 2
    t.equal third, 3
    return
  )
  t.notOk b, "second should get falsey inflight response"
  setTimeout ->
    a 1, 2, 3
    return

  return

