
###*
short-circuited async Array.prototype.some implementation

Serially evaluates a list of values from a JS array or arraylike
against an asynchronous predicate, terminating on the first truthy
value. If the predicate encounters an error, pass it to the completion
callback. Otherwise, pass the truthy value passed by the predicate, or
`false` if no truthy value was passed.
###
some = (list, test, cb) ->
  map = ->
    return hecomes(null, false)  if index >= length
    test array[index], reduce
    return
  reduce = (er, result) ->
    return hecomes(er, false)  if er
    return hecomes(null, result)  if result
    index++
    map()
    return
  assert "length" of list, "array must be arraylike"
  assert.equal typeof test, "function", "predicate must be callable"
  assert.equal typeof cb, "function", "callback must be callable"
  array = slice(list)
  index = 0
  length = array.length
  hecomes = dezalgoify(cb)
  map()
  return

# Array.prototype.slice on arguments arraylike is expensive
slice = (args) ->
  l = args.length
  a = []
  i = undefined
  i = 0
  while i < l
    a[i] = args[i]
    i++
  a
assert = require("assert")
dezalgoify = require("dezalgo")
module.exports = some
