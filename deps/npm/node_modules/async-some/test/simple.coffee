test = require("tap").test
some = require("../some.js")
test "some() doesn't find anything asynchronously", (t) ->
  predicate = (value, cb) ->
    
    # dezalgo ensures it's safe to not do this, but just in case
    setTimeout ->
      cb null, value > "j" and value
      return

    return
  some [
    "a"
    "b"
    "c"
    "d"
    "e"
    "f"
    "g"
  ], predicate, (error, match) ->
    t.ifError error, "ran successfully"
    t.notOk match, "nothing to find, so nothing found"
    t.end()
    return

  return

test "some() doesn't find anything synchronously", (t) ->
  predicate = (value, cb) ->
    cb null, value > "j" and value
    return
  some [
    "a"
    "b"
    "c"
    "d"
    "e"
    "f"
    "g"
  ], predicate, (error, match) ->
    t.ifError error, "ran successfully"
    t.notOk match, "nothing to find, so nothing found"
    t.end()
    return

  return

test "some() doesn't find anything asynchronously", (t) ->
  predicate = (value, cb) ->
    setTimeout ->
      cb null, value > "c" and value
      return

    return
  some [
    "a"
    "b"
    "c"
    "d"
    "e"
    "f"
    "g"
  ], predicate, (error, match) ->
    t.ifError error, "ran successfully"
    t.equals match, "d", "found expected element"
    t.end()
    return

  return

test "some() doesn't find anything synchronously", (t) ->
  predicate = (value, cb) ->
    cb null, value > "c" and value
    return
  some [
    "a"
    "b"
    "c"
    "d"
    "e"
    "f"
    "g"
  ], predicate, (error, match) ->
    t.ifError error, "ran successfully"
    t.equals match, "d", "found expected"
    t.end()
    return

  return

