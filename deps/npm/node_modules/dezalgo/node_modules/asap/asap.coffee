
# Use the fastest possible means to execute a task in a future turn
# of the event loop.

# linked list of tasks (single, with head node)
flush = ->
  
  # jshint loopfunc: true 
  while head.next
    head = head.next
    task = head.task
    head.task = undefined
    domain = head.domain
    if domain
      head.domain = undefined
      domain.enter()
    try
      task()
    catch e
      if isNodeJS
        
        # In node, uncaught exceptions are considered fatal errors.
        # Re-throw them synchronously to interrupt flushing!
        
        # Ensure continuation if the uncaught exception is suppressed
        # listening "uncaughtException" events (as domains does).
        # Continue in next event to avoid tick recursion.
        domain.exit()  if domain
        setTimeout flush, 0
        domain.enter()  if domain
        throw e
      else
        
        # In browsers, uncaught exceptions are not fatal.
        # Re-throw them asynchronously to avoid slow-downs.
        setTimeout (->
          throw ereturn
        ), 0
    domain.exit()  if domain
  flushing = false
  return

# Node.js before 0.9. Note that some fake-Node environments, like the
# Mocha test runner, introduce a `process` global without a `nextTick`.

# In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate

# modern browsers
# http://www.nonblocking.io/2011/06/windownexttick.html

# old browsers
asap = (task) ->
  tail = tail.next =
    task: task
    domain: isNodeJS and process.domain
    next: null

  unless flushing
    flushing = true
    requestFlush()
  return
head =
  task: undefined
  next: null

tail = head
flushing = false
requestFlush = undefined
isNodeJS = false
if typeof process isnt "undefined" and process.nextTick
  isNodeJS = true
  requestFlush = ->
    process.nextTick flush
    return
else if typeof setImmediate is "function"
  if typeof window isnt "undefined"
    requestFlush = setImmediate.bind(window, flush)
  else
    requestFlush = ->
      setImmediate flush
      return
else if typeof MessageChannel isnt "undefined"
  channel = new MessageChannel()
  channel.port1.onmessage = flush
  requestFlush = ->
    channel.port2.postMessage 0
    return
else
  requestFlush = ->
    setTimeout flush, 0
    return
module.exports = asap
