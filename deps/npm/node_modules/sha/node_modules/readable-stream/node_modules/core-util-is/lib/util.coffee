# Copyright Joyent, Inc. and other Node contributors.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the
# following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
# NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
# USE OR OTHER DEALINGS IN THE SOFTWARE.

# NOTE: These type checking functions intentionally don't use `instanceof`
# because it is fragile and can be easily faked with `Object.create()`.
isArray = (ar) ->
  Array.isArray ar
isBoolean = (arg) ->
  typeof arg is "boolean"
isNull = (arg) ->
  arg is null
isNullOrUndefined = (arg) ->
  not arg?
isNumber = (arg) ->
  typeof arg is "number"
isString = (arg) ->
  typeof arg is "string"
isSymbol = (arg) ->
  typeof arg is "symbol"
isUndefined = (arg) ->
  arg is undefined
isRegExp = (re) ->
  isObject(re) and objectToString(re) is "[object RegExp]"
isObject = (arg) ->
  typeof arg is "object" and arg isnt null
isDate = (d) ->
  isObject(d) and objectToString(d) is "[object Date]"
isError = (e) ->
  isObject(e) and (objectToString(e) is "[object Error]" or e instanceof Error)
isFunction = (arg) ->
  typeof arg is "function"
isPrimitive = (arg) ->
  # ES6 symbol
  arg is null or typeof arg is "boolean" or typeof arg is "number" or typeof arg is "string" or typeof arg is "symbol" or typeof arg is "undefined"
isBuffer = (arg) ->
  Buffer.isBuffer arg
objectToString = (o) ->
  Object::toString.call o
exports.isArray = isArray
exports.isBoolean = isBoolean
exports.isNull = isNull
exports.isNullOrUndefined = isNullOrUndefined
exports.isNumber = isNumber
exports.isString = isString
exports.isSymbol = isSymbol
exports.isUndefined = isUndefined
exports.isRegExp = isRegExp
exports.isObject = isObject
exports.isDate = isDate
exports.isError = isError
exports.isFunction = isFunction
exports.isPrimitive = isPrimitive
exports.isBuffer = isBuffer
