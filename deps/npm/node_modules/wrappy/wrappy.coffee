# Returns a wrapper function that returns a wrapped callback
# The wrapper function should do some stuff, and return a
# presumably different callback function.
# This makes sure that own properties are retained, so that
# decorations and such are not lost along the way.
wrappy = (fn, cb) ->
  wrapper = ->
    args = new Array(arguments.length)
    i = 0

    while i < args.length
      args[i] = arguments[i]
      i++
    ret = fn.apply(this, args)
    cb = args[args.length - 1]
    if typeof ret is "function" and ret isnt cb
      Object.keys(cb).forEach (k) ->
        ret[k] = cb[k]
        return

    ret
  return wrappy(fn)(cb)  if fn and cb
  throw new TypeError("need wrapper function")  if typeof fn isnt "function"
  Object.keys(fn).forEach (k) ->
    wrapper[k] = fn[k]
    return

  return wrapper
  return
module.exports = wrappy
