test = require("tap").test
wrappy = require("../wrappy.js")
test "basic", (t) ->
  onceifier = (cb) ->
    called = false
    ->
      return called = true  if called
      cb.apply this, arguments
  boo = ->
    t.equal called, 0
    called++
    return
  onceifier.iAmOnce = {}
  once = wrappy(onceifier)
  t.equal once.iAmOnce, onceifier.iAmOnce
  called = 0
  
  # has some rando property
  boo.iAmBoo = true
  onlyPrintOnce = once(boo)
  onlyPrintOnce() # prints 'boo'
  onlyPrintOnce() # does nothing
  t.equal called, 1
  
  # random property is retained!
  t.equal onlyPrintOnce.iAmBoo, true
  logs = []
  logwrap = wrappy((msg, cb) ->
    logs.push msg + " wrapping cb"
    ->
      logs.push msg + " before cb"
      ret = cb.apply(this, arguments)
      logs.push msg + " after cb"
      return
  )
  c = logwrap("foo", ->
    t.same logs, [
      "foo wrapping cb"
      "foo before cb"
    ]
    return
  )
  c()
  t.same logs, [
    "foo wrapping cb"
    "foo before cb"
    "foo after cb"
  ]
  t.end()
  return

