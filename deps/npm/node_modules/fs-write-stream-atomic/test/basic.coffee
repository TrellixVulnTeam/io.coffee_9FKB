test = require("tap").test
writeStream = require("../index.js")
fs = require("fs")
path = require("path")
test "basic", (t) ->
  
  # open 10 write streams to the same file.
  # then write to each of them, and to the target
  # and verify at the end that each of them does their thing
  verifier = (ev) ->
    ->
      if ev is "close"
        t.equal @__emittedFinish, true
      else
        @__emittedFinish = true
        t.equal ev, "finish"
      
      # make sure that one of the atomic streams won.
      res = fs.readFileSync(target, "utf8")
      lines = res.trim().split(/\n/)
      lines.forEach (line) ->
        first = lines[0].match(/\d+$/)[0]
        cur = line.match(/\d+$/)[0]
        t.equal cur, first
        return

      resExpr = /^first write \d+\nsecond write \d+\nthird write \d+\nfinal write \d+\n$/
      t.similar res, resExpr
      
      # should be called once for each close, and each finish
      t.end()  if ++verifierCalled is n * 2
      return
  target = path.resolve(__dirname, "test.txt")
  n = 10
  streams = []
  i = 0

  while i < n
    s = writeStream(target)
    s.on "finish", verifier("finish")
    s.on "close", verifier("close")
    streams.push s
    i++
  verifierCalled = 0
  
  # now write something to each stream.
  streams.forEach (stream, i) ->
    stream.write "first write " + i + "\n"
    return

  
  # wait a sec for those writes to go out.
  setTimeout (->
    
    # write something else to the target.
    fs.writeFileSync target, "brutality!\n"
    
    # write some more stuff.
    streams.forEach (stream, i) ->
      stream.write "second write " + i + "\n"
      return

    setTimeout (->
      
      # Oops!  Deleted the file!
      fs.unlinkSync target
      
      # write some more stuff.
      streams.forEach (stream, i) ->
        stream.write "third write " + i + "\n"
        return

      setTimeout (->
        fs.writeFileSync target, "brutality TWO!\n"
        streams.forEach (stream, i) ->
          stream.end "final write " + i + "\n"
          return

        return
      ), 50
      return
    ), 50
    return
  ), 50
  return

test "cleanup", (t) ->
  fs.readdirSync(__dirname).filter((f) ->
    f.match /^test.txt/
  ).forEach (file) ->
    fs.unlinkSync path.resolve(__dirname, file)
    return

  t.end()
  return

