LinkWriter = (props) ->
  me = this
  throw new Error("LinkWriter must be called as constructor.")  unless me instanceof LinkWriter
  
  # should already be established as a Link type
  throw new Error("Non-link type " + props.type)  unless (props.type is "Link" and props.Link) or (props.type is "SymbolicLink" and props.SymbolicLink)
  props.linkpath = "."  if props.linkpath is ""
  me.error "Need linkpath property to create " + props.type  unless props.linkpath
  Writer.call this, props
  return

# console.error(" LW _create")

# can only change the link path by clobbering
# For hard links, let's just assume that's always the case, since
# there's no good way to read them if we don't already know.

# only skip creation if it's exactly the same link
clobber = (me, lp, link) ->
  rimraf me._path, (er) ->
    return me.error(er)  if er
    create me, lp, link
    return

  return
create = (me, lp, link) ->
  fs[link] lp, me._path, (er) ->
    
    # if this is a hard link, and we're in the process of writing out a
    # directory, it's very possible that the thing we're linking to
    # doesn't exist yet (especially if it was intended as a symlink),
    # so swallow ENOENT errors here and just soldier in.
    # Additionally, an EPERM or EACCES can happen on win32 if it's trying
    # to make a link to a directory.  Again, just skip it.
    # A better solution would be to have fs.symlink be supported on
    # windows in some nice fashion.
    if er
      if (er.code is "ENOENT" or er.code is "EACCES" or er.code is "EPERM") and process.platform is "win32"
        me.ready = true
        me.emit "ready"
        me.emit "end"
        me.emit "close"
        me.end = me._finish = ->
      else
        return me.error(er)
    finish me
    return

  return
finish = (me) ->
  me.ready = true
  me.emit "ready"
  me._finish()  if me._ended and not me._finished
  return
module.exports = LinkWriter
fs = require("graceful-fs")
Writer = require("./writer.js")
inherits = require("inherits")
path = require("path")
rimraf = require("rimraf")
inherits LinkWriter, Writer
LinkWriter::_create = ->
  me = this
  hard = me.type is "Link" or process.platform is "win32"
  link = (if hard then "link" else "symlink")
  lp = (if hard then path.resolve(me.dirname, me.linkpath) else me.linkpath)
  return clobber(me, lp, link)  if hard
  fs.readlink me._path, (er, p) ->
    return finish(me)  if p and p is lp
    clobber me, lp, link
    return

  return

LinkWriter::end = ->
  
  # console.error("LW finish in end")
  @_ended = true
  if @ready
    @_finished = true
    @_finish()
  return
