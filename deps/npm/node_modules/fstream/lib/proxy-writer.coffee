# A writer for when we don't know what kind of thing
# the thing is.  That is, it's not explicitly set,
# so we're going to make it whatever the thing already
# is, or "File"
#
# Until then, collect all events.
ProxyWriter = (props) ->
  me = this
  throw new Error("ProxyWriter must be called as constructor.")  unless me instanceof ProxyWriter
  me.props = props
  me._needDrain = false
  Writer.call me, props
  return
module.exports = ProxyWriter
Writer = require("./writer.js")
getType = require("./get-type.js")
inherits = require("inherits")
collect = require("./collect.js")
fs = require("fs")
inherits ProxyWriter, Writer
ProxyWriter::_stat = ->
  me = this
  props = me.props
  
  # stat the thing to see what the proxy should be.
  stat = (if props.follow then "stat" else "lstat")
  fs[stat] props.path, (er, current) ->
    type = undefined
    if er or not current
      type = "File"
    else
      type = getType(current)
    props[type] = true
    props.type = me.type = type
    me._old = current
    me._addProxy Writer(props, current)
    return

  return

ProxyWriter::_addProxy = (proxy) ->
  
  # console.error("~~ set proxy", this.path)
  me = this
  return me.error("proxy already set")  if me._proxy
  me._proxy = proxy
  [
    "ready"
    "error"
    "close"
    "pipe"
    "drain"
    "warn"
  ].forEach (ev) ->
    proxy.on ev, me.emit.bind(me, ev)
    return

  me.emit "proxy", proxy
  calls = me._buffer
  calls.forEach (c) ->
    
    # console.error("~~ ~~ proxy buffered call", c[0], c[1])
    proxy[c[0]].apply proxy, c[1]
    return

  me._buffer.length = 0
  me.emit "drain"  if me._needsDrain
  return

ProxyWriter::add = (entry) ->
  
  # console.error("~~ proxy add")
  collect entry
  unless @_proxy
    @_buffer.push [
      "add"
      [entry]
    ]
    @_needDrain = true
    return false
  @_proxy.add entry

ProxyWriter::write = (c) ->
  
  # console.error("~~ proxy write")
  unless @_proxy
    @_buffer.push [
      "write"
      [c]
    ]
    @_needDrain = true
    return false
  @_proxy.write c

ProxyWriter::end = (c) ->
  
  # console.error("~~ proxy end")
  unless @_proxy
    @_buffer.push [
      "end"
      [c]
    ]
    return false
  @_proxy.end c
