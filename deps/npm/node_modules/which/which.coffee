
# On windows, there is no good way to check that a file is executable

#console.error(mod, uid, gid);
#console.error("isExe?", (mod & 0111).toString(8))

#console.error("isExe?", ret)
which = (cmd, cb) ->
  return cb(null, cmd)  if isAbsolute(cmd)
  pathEnv = (process.env.PATH or "").split(COLON)
  pathExt = [""]
  if process.platform is "win32"
    pathEnv.push process.cwd()
    pathExt = (process.env.PATHEXT or ".EXE").split(COLON)
    pathExt.unshift ""  if cmd.indexOf(".") isnt -1
  
  #console.error("pathEnv", pathEnv)
  (F = (i, l) ->
    return cb(new Error("not found: " + cmd))  if i is l
    p = path.resolve(pathEnv[i], cmd)
    (E = (ii, ll) ->
      return F(i + 1, l)  if ii is ll
      ext = pathExt[ii]
      
      #console.error(p + ext)
      fs.stat p + ext, (er, stat) ->
        
        #console.error("yes, exe!", p + ext)
        return cb(null, p + ext)  if not er and stat and stat.isFile() and isExe(stat.mode, stat.uid, stat.gid)
        E ii + 1, ll

      return
    ) 0, pathExt.length
    return
  ) 0, pathEnv.length
  return
whichSync = (cmd) ->
  return cmd  if isAbsolute(cmd)
  pathEnv = (process.env.PATH or "").split(COLON)
  pathExt = [""]
  if process.platform is "win32"
    pathEnv.push process.cwd()
    pathExt = (process.env.PATHEXT or ".EXE").split(COLON)
    pathExt.unshift ""  if cmd.indexOf(".") isnt -1
  i = 0
  l = pathEnv.length

  while i < l
    p = path.join(pathEnv[i], cmd)
    j = 0
    ll = pathExt.length

    while j < ll
      cur = p + pathExt[j]
      stat = undefined
      try
        stat = fs.statSync(cur)
      return cur  if stat and stat.isFile() and isExe(stat.mode, stat.uid, stat.gid)
      j++
    i++
  throw new Error("not found: " + cmd)return
absWin = (p) ->
  return true  if absUnix(p)
  
  # pull off the device/UNC bit from a windows path.
  # from node's lib/path.js
  splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?([\\\/])?/
  result = splitDeviceRe.exec(p)
  device = result[1] or ""
  isUnc = device and device.charAt(1) isnt ":"
  isAbsolute = !!result[2] or isUnc # UNC paths are always absolute
  isAbsolute
absUnix = (p) ->
  p.charAt(0) is "/" or p is ""
module.exports = which
which.sync = whichSync
path = require("path")
fs = undefined
COLON = (if process.platform is "win32" then ";" else ":")
isExe = undefined
try
  fs = require("graceful-fs")
catch ex
  fs = require("fs")
if process.platform is "win32"
  isExe = isExe = ->
    true
else
  isExe = isExe = (mod, uid, gid) ->
    ret = (mod & 0001) or (mod & 0010) and process.getgid and gid is process.getgid() or (mod & 0100) and process.getuid and uid is process.getuid()
    ret
isAbsolute = (if process.platform is "win32" then absWin else absUnix)
