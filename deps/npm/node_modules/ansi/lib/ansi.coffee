
###*
References:

- http://en.wikipedia.org/wiki/ANSI_escape_code
- http://www.termsys.demon.co.uk/vtansi.htm
###

###*
Module dependencies.
###
# For all escape codes
# Only for color codes

###*
The ANSI escape sequences.
###

###*
Rendering ANSI codes.
###

###*
The negating ANSI code for the rendering modes.
###

###*
The standard, styleable ANSI colors.
###

###*
Creates a Cursor instance based off the given `writable stream` instance.
###
ansi = (stream, options) ->
  if stream._ansicursor
    stream._ansicursor
  else
    stream._ansicursor = new Cursor(stream, options)

###*
The `Cursor` class.
###
Cursor = (stream, options) ->
  return new Cursor(stream, options)  unless this instanceof Cursor
  throw new Error("a valid Stream instance must be passed in")  if typeof stream isnt "object" or typeof stream.write isnt "function"
  
  # the stream to use
  @stream = stream
  
  # when 'enabled' is false then all the functions are no-ops except for write()
  @enabled = options and options.enabled
  @enabled = stream.isTTY  if typeof @enabled is "undefined"
  @enabled = !!@enabled
  
  # then `buffering` is true, then `write()` calls are buffered in
  # memory until `flush()` is invoked
  @buffering = !!(options and options.buffering)
  @_buffer = []
  
  # controls the foreground and background colors
  @fg = @foreground = new Colorer(this, 0)
  @bg = @background = new Colorer(this, 10)
  
  # defaults
  @Bold = false
  @Italic = false
  @Underline = false
  @Inverse = false
  
  # keep track of the number of "newlines" that get encountered
  @newlines = 0
  emitNewlineEvents stream
  stream.on "newline", (->
    @newlines++
    return
  ).bind(this)
  return

###*
Helper function that calls `write()` on the underlying Stream.
Returns `this` instead of the write() return value to keep
the chaining going.
###

###*
Buffer `write()` calls into memory.

@api public
###

###*
Write out the in-memory buffer.

@api public
###
# empty

###*
The `Colorer` class manages both the background and foreground colors.
###
Colorer = (cursor, base) ->
  @current = null
  @cursor = cursor
  @base = base
  return

###*
Write an ANSI color code, ensuring that the same code doesn't get rewritten.
###

###*
Set up the positional ANSI codes.
###

###*
Set up the functions for the rendering ANSI codes.
###

###*
Setup the functions for the standard colors.
###

###*
Makes a beep sound!
###

###*
Moves cursor to specific position
###

###*
Resets the color.
###

###*
Resets all ANSI formatting on the stream.
###

###*
Sets the foreground color with the given RGB values.
The closest match out of the 216 colors is picked.
###

###*
Same as `cursor.fg.rgb(r, g, b)`.
###

###*
Accepts CSS color codes for use with ANSI escape codes.
For example: `#FF000` would be bright red.
###

###*
Same as `cursor.fg.hex(color)`.
###

# UTIL FUNCTIONS //

###*
Translates a 255 RGB value to a 0-5 ANSI RGV value,
then returns the single ANSI color code to use.
###
rgb = (r, g, b) ->
  red = r / 255 * 5
  green = g / 255 * 5
  blue = b / 255 * 5
  rgb5 red, green, blue

###*
Turns rgb 0-5 values into a single ANSI color code to use.
###
rgb5 = (r, g, b) ->
  red = Math.round(r)
  green = Math.round(g)
  blue = Math.round(b)
  16 + (red * 36) + (green * 6) + blue

###*
Accepts a hex CSS color code string (# is optional) and
translates it into an Array of 3 RGB 0-255 values, which
can then be used with rgb().
###
hex = (color) ->
  c = (if color[0] is "#" then color.substring(1) else color)
  r = c.substring(0, 2)
  g = c.substring(2, 4)
  b = c.substring(4, 6)
  [
    parseInt(r, 16)
    parseInt(g, 16)
    parseInt(b, 16)
  ]

###*
Turns an array-like object into a real array.
###
toArray = (a) ->
  i = 0
  l = a.length
  rtn = []
  while i < l
    rtn.push a[i]
    i++
  rtn
emitNewlineEvents = require("./newlines")
prefix = "\u001b["
suffix = "m"
codes =
  up: "A"
  down: "B"
  forward: "C"
  back: "D"
  nextLine: "E"
  previousLine: "F"
  horizontalAbsolute: "G"
  eraseData: "J"
  eraseLine: "K"
  scrollUp: "S"
  scrollDown: "T"
  savePosition: "s"
  restorePosition: "u"
  queryPosition: "6n"
  hide: "?25l"
  show: "?25h"

styles =
  bold: 1
  italic: 3
  underline: 4
  inverse: 7

reset =
  bold: 22
  italic: 23
  underline: 24
  inverse: 27

colors =
  white: 37
  black: 30
  blue: 34
  cyan: 36
  green: 32
  magenta: 35
  red: 31
  yellow: 33
  grey: 90
  brightBlack: 90
  brightRed: 91
  brightGreen: 92
  brightYellow: 93
  brightBlue: 94
  brightMagenta: 95
  brightCyan: 96
  brightWhite: 97

module.exports = exports = ansi
exports.Cursor = Cursor
Cursor::write = (data) ->
  if @buffering
    @_buffer.push arguments
  else
    @stream.write.apply @stream, arguments
  this

Cursor::buffer = ->
  @buffering = true
  this

Cursor::flush = ->
  @buffering = false
  str = @_buffer.map((args) ->
    throw new Error("unexpected args length! " + args.length)  unless args.length is 1
    args[0]
  ).join("")
  @_buffer.splice 0
  @write str
  this

exports.Colorer = Colorer
Colorer::_setColorCode = setColorCode = (code) ->
  c = String(code)
  return @cursor.enabled and @cursor.write(prefix + c + suffix)  if @current is c
  @current = c
  this

Object.keys(codes).forEach (name) ->
  code = String(codes[name])
  Cursor::[name] = ->
    c = code
    c = toArray(arguments).map(Math.round).join(";") + code  if arguments.length > 0
    @enabled and @write(prefix + c)
    this

  return

Object.keys(styles).forEach (style) ->
  name = style[0].toUpperCase() + style.substring(1)
  c = styles[style]
  r = reset[style]
  Cursor::[style] = ->
    return @enabled and @write(prefix + c + suffix)  if this[name]
    this[name] = true
    this

  Cursor::["reset" + name] = ->
    return @enabled and @write(prefix + r + suffix)  unless this[name]
    this[name] = false
    this

  return

Object.keys(colors).forEach (color) ->
  code = colors[color]
  Colorer::[color] = ->
    @_setColorCode @base + code
    @cursor

  Cursor::[color] = ->
    @foreground[color]()

  return

Cursor::beep = ->
  @enabled and @write("\u0007")
  this

Cursor::goto = (x, y) ->
  x = x | 0
  y = y | 0
  @enabled and @write(prefix + y + ";" + x + "H")
  this

Colorer::reset = ->
  @_setColorCode @base + 39
  @cursor

Cursor::reset = ->
  @enabled and @write(prefix + "0" + suffix)
  @Bold = false
  @Italic = false
  @Underline = false
  @Inverse = false
  @foreground.current = null
  @background.current = null
  this

Colorer::rgb = (r, g, b) ->
  base = @base + 38
  code = rgb(r, g, b)
  @_setColorCode base + ";5;" + code
  @cursor

Cursor::rgb = (r, g, b) ->
  @foreground.rgb r, g, b

Colorer::hex = (color) ->
  @rgb.apply this, hex(color)

Cursor::hex = (color) ->
  @foreground.hex color
