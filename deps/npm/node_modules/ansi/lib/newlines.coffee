
###*
Accepts any node Stream instance and hijacks its "write()" function,
so that it can count any newlines that get written to the output.

When a '\n' byte is encountered, then a "newline" event will be emitted
on the stream, with no arguments. It is up to the listeners to determine
any necessary deltas required for their use-case.

Ex:

var cursor = ansi(process.stdout)
, ln = 0
process.stdout.on('newline', function () {
ln++
})
###

###*
Module dependencies.
###
emitNewlineEvents = (stream) ->
  
  # already emitting newline events
  return  if stream._emittingNewlines
  write = stream.write
  stream.write = (data) ->
    
    # first write the data
    rtn = write.apply(stream, arguments)
    if stream.listeners("newline").length > 0
      len = data.length
      i = 0
      
      # now try to calculate any deltas
      if typeof data is "string"
        while i < len
          processByte stream, data.charCodeAt(i)
          i++
      else
        
        # buffer
        while i < len
          processByte stream, data[i]
          i++
    rtn

  stream._emittingNewlines = true
  return

###*
Processes an individual byte being written to a stream
###
processByte = (stream, b) ->
  assert.equal typeof b, "number"
  stream.emit "newline"  if b is NEWLINE
  return
assert = require("assert")
NEWLINE = "\n".charCodeAt(0)
module.exports = emitNewlineEvents
