IgnoreFile = require("../")
fs = require("fs")

# set the ignores just for this test
c = require("./common.js")
c.ignores ".gitignore": ["a/b/c/abc"]
c.ignores ".ignore": [
  "*"
  "!a/b/c/abc"
]

# the only files we expect to see
expected = [
  "/a"
  "/a/b"
  "/a/b/c"
  "/a/b/c/abc"
]
originalReadFile = fs.readFile
parallelCount = 0
firstCall = undefined

# Overwrite fs.readFile so that when .gitignore and .ignore are read in
# parallel, .ignore will always be read first.
fs.readFile = (filename, options, callback) ->
  if typeof options is "function"
    callback = options
    options = false
  parallelCount++
  process.nextTick ->
    if parallelCount > 1
      unless firstCall
        return firstCall = (cb) ->
          originalReadFile filename, options, (err, data) ->
            callback err, data
            cb()  if cb
            return

          return
      if filename.indexOf(".gitignore") isnt -1
        firstCall ->
          originalReadFile filename, options, callback
          return

      else
        originalReadFile filename, options, (err, data) ->
          callback err, data
          firstCall()
          return

    else
      originalReadFile filename, options, callback
      parallelCount = 0
    return

  return

require("tap").test "read file order", (t) ->
  t.pass "start"
  IgnoreFile(
    path: __dirname + "/fixtures"
    ignoreFiles: [
      ".gitignore"
      ".ignore"
    ]
  ).on("ignoreFile", (e) ->
    console.error "ignore file!", e
    return
  ).on("child", (e) ->
    p = e.path.substr(e.root.path.length)
    i = expected.indexOf(p)
    if i is -1
      t.fail "unexpected file found",
        f: p

    else
      t.pass p
      expected.splice i, 1
    return
  ).on "close", ->
    fs.readFile = originalReadFile
    t.notOk expected.length, "all expected files should be seen"
    t.end()
    return

  return

