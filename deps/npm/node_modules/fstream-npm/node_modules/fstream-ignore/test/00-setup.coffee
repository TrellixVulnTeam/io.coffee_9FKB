# The test fixtures work like this:
# These dirs are all created: {a,b,c}/{a,b,c}/{a,b,c}/
# in each one, these files are created:
# {.,}{a,b,c}{a,b,c}{a,b,c}
#
# So, there'll be a/b/c/abc, a/b/c/aba, etc., and dot-versions of each.
#
# Each test then writes their own ignore file rules for their purposes,
# and is responsible for removing them afterwards.
mkdirp = require("mkdirp")
path = require("path")
i = 0
tap = require("tap")
fs = require("fs")
rimraf = require("rimraf")
fixtures = path.resolve(__dirname, "fixtures")
chars = [
  "a"
  "b"
  "c"
]
dirs = []
i = 0

while i < 3
  j = 0

  while j < 3
    k = 0

    while k < 3
      dirs.push chars[i] + "/" + chars[j] + "/" + chars[k]
      k++
    j++
  i++
files = []
i = 0

while i < 3
  j = 0

  while j < 3
    k = 0

    while k < 3
      files.push chars[i] + chars[j] + chars[k]
      files.push "." + chars[i] + chars[j] + chars[k]
      k++
    j++
  i++
tap.test "remove fixtures", (t) ->
  rimraf path.resolve(__dirname, "fixtures"), (er) ->
    t.ifError er, "remove fixtures"
    t.end()
    return

  return

tap.test "create fixtures", (t) ->
  dirs.forEach (dir) ->
    dir = path.resolve(fixtures, dir)
    t.test "mkdir " + dir, (t) ->
      mkdirp dir, (er) ->
        t.ifError er, "mkdir " + dir
        return t.end()  if er
        files.forEach (file) ->
          file = path.resolve(dir, file)
          t.test "writeFile " + file, (t) ->
            fs.writeFile file, path.basename(file), (er) ->
              t.ifError er, "writing " + file
              t.end()
              return

            return

          return

        t.end()
        return

      return

    return

  t.end()
  return

