test = require("tap").test
CC = require("../index.js").ConfigChain
env =
  foo_blaz: "blzaa"
  foo_env: "myenv"

jsonObj =
  blaz: "json"
  json: true

iniObj =
  "x.y.z": "xyz"
  blaz: "ini"

fs = require("fs")
ini = require("ini")
fs.writeFileSync "/tmp/config-chain-class.json", JSON.stringify(jsonObj)
fs.writeFileSync "/tmp/config-chain-class.ini", ini.stringify(iniObj)
http = require("http")
reqs = 0

# make sure that the requests come back from the server
# out of order.  they should still be ordered properly
# in the resulting config object set.
http.createServer((q, s) ->
  @close()  if ++reqs is 2
  if q.url is "/json"
    setTimeout (->
      s.setHeader "content-type", "application/json"
      s.end JSON.stringify(
        blaz: "http"
        http: true
        json: true
      )
      return
    ), 200
  else
    s.setHeader "content-type", "application/ini"
    s.end ini.stringify(
      blaz: "http"
      http: true
      ini: true
      json: false
    )
  return
).listen 1337
test "basic class test", (t) ->
  cc = new CC()
  expectlist = [
    {
      blaz: "json"
      json: true
    }
    {
      "x.y.z": "xyz"
      blaz: "ini"
    }
    {
      blaz: "blzaa"
      env: "myenv"
    }
    {
      blaz: "http"
      http: true
      json: true
    }
    {
      blaz: "http"
      http: true
      ini: true
      json: false
    }
  ]
  cc.addFile("/tmp/config-chain-class.json").addFile("/tmp/config-chain-class.ini").addEnv("foo_", env).addUrl("http://localhost:1337/json").addUrl("http://localhost:1337/ini").on "load", ->
    t.same cc.list, expectlist
    t.same cc.snapshot,
      blaz: "json"
      json: true
      "x.y.z": "xyz"
      env: "myenv"
      http: true
      ini: true

    cc.del "blaz", "/tmp/config-chain-class.json"
    t.same cc.snapshot,
      blaz: "ini"
      json: true
      "x.y.z": "xyz"
      env: "myenv"
      http: true
      ini: true

    cc.del "blaz"
    t.same cc.snapshot,
      json: true
      "x.y.z": "xyz"
      env: "myenv"
      http: true
      ini: true

    cc.shift()
    t.same cc.snapshot,
      "x.y.z": "xyz"
      env: "myenv"
      http: true
      json: true
      ini: true

    cc.shift()
    t.same cc.snapshot,
      env: "myenv"
      http: true
      json: true
      ini: true

    cc.shift()
    t.same cc.snapshot,
      http: true
      json: true
      ini: true

    cc.shift()
    t.same cc.snapshot,
      http: true
      ini: true
      json: false

    cc.shift()
    t.same cc.snapshot, {}
    t.end()
    return

  return

