check = (cp) ->
  gotExit = false
  gotClose = false
  stdoutData = ""
  stdoutEnd = false
  stderrData = ""
  stderrEnd = false
  cp.stdout.setEncoding "ascii"
  cp.stdout.on "data", (data) ->
    assert not stdoutEnd
    stdoutData += data
    return

  cp.stdout.on "end", (data) ->
    assert not stdoutEnd
    assert.strictEqual stdoutData.length, 100000
    stdoutEnd = true
    return

  cp.stderr.setEncoding "ascii"
  cp.stderr.on "data", (data) ->
    stderrData += data
    return

  cp.stderr.on "end", (data) ->
    assert not stderrEnd
    assert.strictEqual stderrData.length, 100000
    stderrEnd = true
    return

  cp.on "exit", (code, signal) ->
    assert.strictEqual code, 0
    assert not signal
    assert not gotExit
    assert not gotClose
    gotExit = true
    return

  cp.on "close", (code, signal) ->
    assert.strictEqual code, 0
    assert not signal
    assert not cp.stdout or stdoutEnd
    assert not cp.stderr or stderrEnd
    assert gotExit
    assert not gotClose
    gotClose = true
    return

  process.on "exit", ->
    assert gotExit
    assert gotClose
    return

  return
require "../index"
assert = require("assert")
spawn = require("child_process").spawn
execFile = require("child_process").execFile
cp1 = spawn(process.execPath, ["worker-spawn"])
check cp1
cp2 = execFile(process.execPath, ["worker-spawn"], (err) ->
  assert not err
  return
)
check cp2
