# show that no match events happen while paused.

# just some gnarly pattern with lots of matches

# run from the root of the project
# this is usually where you're at anyway, but be sure.
alphasort = (a, b) ->
  a = a.toLowerCase()
  b = b.toLowerCase()
  (if a > b then 1 else (if a < b then -1 else 0))
cleanResults = (m) ->
  
  # normalize discrepancies in ordering, duplication,
  # and ending slashes.
  m.map((m) ->
    m.replace(/\/+/g, "/").replace /\/$/, ""
  ).sort(alphasort).reduce((set, f) ->
    set.push f  if f isnt set[set.length - 1]
    set
  , []).sort(alphasort).map (f) ->
    
    # de-windows
    (if (process.platform isnt "win32") then f else f.replace(/^[a-zA-Z]:\\\\/, "/").replace(/\\/g, "/"))

tap = require("tap")
child_process = require("child_process")
pattern = "test/a/!(symlink)/**"
bashResults = require("./bash-results.json")
patterns = Object.keys(bashResults)
glob = require("../")
Glob = glob.Glob
path = require("path")
process.chdir path.resolve(__dirname, "..")
globResults = []
tap.test "use a Glob object, and pause/resume it", (t) ->
  g = new Glob(pattern)
  paused = false
  res = []
  expect = bashResults[pattern]
  g.on "pause", ->
    console.error "pause"
    return

  g.on "resume", ->
    console.error "resume"
    return

  g.on "match", (m) ->
    t.notOk g.paused, "must not be paused"
    globResults.push m
    g.pause()
    t.ok g.paused, "must be paused"
    setTimeout g.resume.bind(g), 10
    return

  g.on "end", (matches) ->
    t.pass "reached glob end"
    globResults = cleanResults(globResults)
    matches = cleanResults(matches)
    t.deepEqual matches, globResults, "end event matches should be the same as match events"
    t.deepEqual matches, expect, "glob matches should be the same as bash results"
    t.end()
    return

  return

