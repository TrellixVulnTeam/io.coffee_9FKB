# basic test
# show that it does the same thing by default as the shell.

# run from the root of the project
# this is usually where you're at anyway, but be sure.
alphasort = (a, b) ->
  a = a.toLowerCase()
  b = b.toLowerCase()
  (if a > b then 1 else (if a < b then -1 else 0))

# anything regarding the symlink thing will fail on windows, so just skip it

# sort and unmark, just to match the shell results
cleanResults = (m) ->
  
  # normalize discrepancies in ordering, duplication,
  # and ending slashes.
  m.map((m) ->
    m.replace(/\/+/g, "/").replace /\/$/, ""
  ).sort(alphasort).reduce((set, f) ->
    set.push f  if f isnt set[set.length - 1]
    set
  , []).sort(alphasort).map (f) ->
    
    # de-windows
    (if (process.platform isnt "win32") then f else f.replace(/^[a-zA-Z]:[\/\\]+/, "/").replace(/[\\\/]+/g, "/"))

tap = require("tap")
child_process = require("child_process")
bashResults = require("./bash-results.json")
globs = Object.keys(bashResults)
glob = require("../")
path = require("path")
process.chdir path.resolve(__dirname, "..")
globs.forEach (pattern) ->
  expect = bashResults[pattern]
  if process.platform is "win32" and expect.some((m) ->
    /\/symlink\//.test m
  )
    return tap.test(pattern, (t) ->
      glob pattern, (er, matches) ->
        throw er  if er
        matches = cleanResults(matches)
        t.deepEqual matches, expect, pattern
        t.end()
        return

      return
    )
  tap.test pattern + " sync", (t) ->
    matches = cleanResults(glob.sync(pattern))
    t.deepEqual matches, expect, "should match shell"
    t.end()
    return

  return

