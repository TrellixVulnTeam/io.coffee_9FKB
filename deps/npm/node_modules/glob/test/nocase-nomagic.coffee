fs = undefined
try
  fs = require("graceful-fs")
catch e
  fs = require("fs")
test = require("tap").test
glob = require("../")
test "mock fs", (t) ->
  fakeStat = (path) ->
    ret = undefined
    switch path.toLowerCase()
      when "/tmp", "/tmp/", "c:\\tmp", "c:\\tmp\\"
        ret = isDirectory: ->
          true
      when "/tmp/a", "c:\\tmp\\a"
        ret = isDirectory: ->
          false
    ret
  fakeReaddir = (path) ->
    ret = undefined
    switch path.toLowerCase()
      when "/tmp", "/tmp/", "c:\\tmp", "c:\\tmp\\"
        ret = [
          "a"
          "A"
        ]
      when "/", "c:\\"
        ret = [
          "tmp"
          "tMp"
          "tMP"
          "TMP"
        ]
    ret
  stat = fs.stat
  statSync = fs.statSync
  readdir = fs.readdir
  readdirSync = fs.readdirSync
  fs.stat = (path, cb) ->
    f = fakeStat(path)
    if f
      process.nextTick ->
        cb null, f
        return

    else
      stat.call fs, path, cb
    return

  fs.statSync = (path) ->
    fakeStat(path) or statSync.call(fs, path)

  fs.readdir = (path, cb) ->
    f = fakeReaddir(path)
    if f
      process.nextTick ->
        cb null, f
        return

    else
      readdir.call fs, path, cb
    return

  fs.readdirSync = (path) ->
    fakeReaddir(path) or readdirSync.call(fs, path)

  t.pass "mocked"
  t.end()
  return

test "nocase, nomagic", (t) ->
  n = 2
  want = [
    "/TMP/A"
    "/TMP/a"
    "/tMP/A"
    "/tMP/a"
    "/tMp/A"
    "/tMp/a"
    "/tmp/A"
    "/tmp/a"
  ]
  if process.platform.match(/^win/)
    want = want.map((p) ->
      "C:" + p
    )
  glob "/tmp/a",
    nocase: true
  , (er, res) ->
    throw er  if er
    t.same res.sort(), want
    t.end()  if --n is 0
    return

  glob "/tmp/A",
    nocase: true
  , (er, res) ->
    throw er  if er
    t.same res.sort(), want
    t.end()  if --n is 0
    return

  return

test "nocase, with some magic", (t) ->
  t.plan 2
  want = [
    "/TMP/A"
    "/TMP/a"
    "/tMP/A"
    "/tMP/a"
    "/tMp/A"
    "/tMp/a"
    "/tmp/A"
    "/tmp/a"
  ]
  if process.platform.match(/^win/)
    want = want.map((p) ->
      "C:" + p
    )
  glob "/tmp/*",
    nocase: true
  , (er, res) ->
    throw er  if er
    t.same res.sort(), want
    return

  glob "/tmp/*",
    nocase: true
  , (er, res) ->
    throw er  if er
    t.same res.sort(), want
    return

  return

