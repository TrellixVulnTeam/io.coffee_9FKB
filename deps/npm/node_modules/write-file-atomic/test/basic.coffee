"use strict"
test = require("tap").test
requireInject = require("require-inject")
writeFileAtomic = requireInject("../index",
  "graceful-fs":
    writeFile: (tmpfile, data, options, cb) ->
      return cb("ENOWRITE")  if /nowrite/.test(tmpfile)
      cb()
      return

    chown: (tmpfile, uid, gid, cb) ->
      return cb("ENOCHOWN")  if /nochown/.test(tmpfile)
      cb()
      return

    rename: (tmpfile, filename, cb) ->
      return cb("ENORENAME")  if /norename/.test(tmpfile)
      cb()
      return

    unlink: (tmpfile, cb) ->
      return cb("ENOUNLINK")  if /nounlink/.test(tmpfile)
      cb()
      return

    writeFileSync: (tmpfile, data, options) ->
      throw "ENOWRITE"  if /nowrite/.test(tmpfile)
      return

    chownSync: (tmpfile, uid, gid) ->
      throw "ENOCHOWN"  if /nochown/.test(tmpfile)
      return

    renameSync: (tmpfile, filename) ->
      throw "ENORENAME"  if /norename/.test(tmpfile)
      return

    unlinkSync: (tmpfile) ->
      throw "ENOUNLINK"  if /nounlink/.test(tmpfile)
      return
)
writeFileAtomicSync = writeFileAtomic.sync
test "async tests", (t) ->
  t.plan 7
  writeFileAtomic "good", "test",
    mode: "0777"
  , (err) ->
    t.notOk err, "No errors occur when passing in options"
    return

  writeFileAtomic "good", "test", (err) ->
    t.notOk err, "No errors occur when NOT passing in options"
    return

  writeFileAtomic "nowrite", "test", (err) ->
    t.is err, "ENOWRITE", "writeFile failures propagate"
    return

  writeFileAtomic "nochown", "test",
    chown:
      uid: 100
      gid: 100
  , (err) ->
    t.is err, "ENOCHOWN", "Chown failures propagate"
    return

  writeFileAtomic "nochown", "test", (err) ->
    t.notOk err, "No attempt to chown when no uid/gid passed in"
    return

  writeFileAtomic "norename", "test", (err) ->
    t.is err, "ENORENAME", "Rename errors propagate"
    return

  writeFileAtomic "norename nounlink", "test", (err) ->
    t.is err, "ENORENAME", "Failure to unlink the temp file does not clobber the original error"
    return

  return

test "sync tests", (t) ->
  t.plan 7
  throws = (shouldthrow, msg, todo) ->
    err = undefined
    try
      todo()
    catch e
      err = e
    t.is shouldthrow, err, msg
    return

  noexception = (msg, todo) ->
    err = undefined
    try
      todo()
    catch e
      err = e
    t.notOk err, msg
    return

  noexception "No errors occur when passing in options", ->
    writeFileAtomicSync "good", "test",
      mode: "0777"

    return

  noexception "No errors occur when NOT passing in options", ->
    writeFileAtomicSync "good", "test"
    return

  throws "ENOWRITE", "writeFile failures propagate", ->
    writeFileAtomicSync "nowrite", "test"
    return

  throws "ENOCHOWN", "Chown failures propagate", ->
    writeFileAtomicSync "nochown", "test",
      chown:
        uid: 100
        gid: 100

    return

  noexception "No attempt to chown when no uid/gid passed in", ->
    writeFileAtomicSync "nochown", "test"
    return

  throws "ENORENAME", "Rename errors propagate", ->
    writeFileAtomicSync "norename", "test"
    return

  throws "ENORENAME", "Failure to unlink the temp file does not clobber the original error", ->
    writeFileAtomicSync "norename nounlink", "test"
    return

  return

