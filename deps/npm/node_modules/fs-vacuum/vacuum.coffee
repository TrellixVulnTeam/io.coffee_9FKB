vacuum = (leaf, options, cb) ->
  next = (branch) ->
    
    # either we've reached the base or we've reached the root
    if (base and resolve(branch) is resolve(base)) or branch is dirname(branch)
      log "finished vacuuming up to", branch
      return cb(null)
    readdir branch, (error, files) ->
      if error
        return cb(null)  if error.code is "ENOENT"
        log "unable to check directory", branch, "due to", error.message
        return cb(error)
      if files.length > 0
        log "quitting because other entries in", branch
        return cb(null)
      log "removing", branch
      lstat branch, (error, stat) ->
        if error
          return cb(null)  if error.code is "ENOENT"
          log "unable to lstat", branch, "due to", error.message
          return cb(error)
        remove = (if stat.isDirectory() then rmdir else unlink)
        remove branch, (error) ->
          if error
            return cb(null)  if error.code is "ENOENT"
            log "unable to remove", branch, "due to", error.message
            return cb(error)
          next dirname(branch)
          return

        return

      return

    return
  assert typeof leaf is "string", "must pass in path to remove"
  assert typeof cb is "function", "must pass in callback"
  options = {}  unless options
  assert typeof options is "object", "options must be an object"
  log = (if options.log then options.log else ->
  )
  base = options.base
  return cb(new Error(resolve(leaf) + " is not a child of " + resolve(base)))  if base and resolve(leaf).indexOf(resolve(base)) isnt 0
  lstat leaf, (error, stat) ->
    if error
      return cb(null)  if error.code is "ENOENT"
      log error.stack
      return cb(error)
    unless stat and (stat.isDirectory() or stat.isSymbolicLink() or stat.isFile())
      log leaf, "is not a directory, file, or link"
      return cb(new Error(leaf + " is not a directory, file, or link"))
    if options.purge
      log "purging", leaf
      rimraf leaf, (error) ->
        return cb(error)  if error
        next dirname(leaf)
        return

    else unless stat.isDirectory()
      log "removing", leaf
      unlink leaf, (error) ->
        return cb(error)  if error
        next dirname(leaf)
        return

    else
      next leaf
    return

  return
assert = require("assert")
dirname = require("path").dirname
resolve = require("path").resolve
rimraf = require("rimraf")
lstat = require("graceful-fs").lstat
readdir = require("graceful-fs").readdir
rmdir = require("graceful-fs").rmdir
unlink = require("graceful-fs").unlink
module.exports = vacuum
