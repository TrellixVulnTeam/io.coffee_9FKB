
# CONSTANTS
log = ->
  messages.push Array::slice.call(arguments).join(" ")
  return
path = require("path")
test = require("tap").test
statSync = require("graceful-fs").statSync
mkdtemp = require("tmp").dir
mkdirp = require("mkdirp")
vacuum = require("../vacuum.js")
TEMP_OPTIONS =
  unsafeCleanup: true
  mode: "0700"

SHORT_PATH = path.join("i", "am", "a", "path")
REMOVE_PATH = path.join(SHORT_PATH, "of", "a", "certain", "length")
OTHER_PATH = path.join(SHORT_PATH, "of", "no", "qualities")
messages = []
testBase = undefined
testPath = undefined
otherPath = undefined
test "xXx setup xXx", (t) ->
  mkdtemp TEMP_OPTIONS, (er, tmpdir) ->
    t.ifError er, "temp directory exists"
    testBase = path.resolve(tmpdir, SHORT_PATH)
    testPath = path.resolve(tmpdir, REMOVE_PATH)
    otherPath = path.resolve(tmpdir, OTHER_PATH)
    mkdirp testPath, (er) ->
      t.ifError er, "made test path"
      mkdirp otherPath, (er) ->
        t.ifError er, "made other path"
        t.end()
        return

      return

    return

  return

test "remove up to a point", (t) ->
  vacuum testPath,
    purge: false
    base: testBase
    log: log
  , (er) ->
    verify = ->
      stat = statSync(verifyPath)
      return
    t.ifError er, "cleaned up to base"
    t.equal messages.length, 4, "got 3 removal & 1 finish message"
    t.equal messages[3], "quitting because other entries in " + testBase + "/of", "got expected final message"
    stat = undefined
    verifyPath = testPath
    i = 0

    while i < 3
      t.throws verify, verifyPath + " cannot be statted"
      t.notOk stat and stat.isDirectory(), verifyPath + " is totally gone"
      verifyPath = path.dirname(verifyPath)
      i++
    t.doesNotThrow (->
      stat = statSync(otherPath)
      return
    ), otherPath + " can be statted"
    t.ok stat and stat.isDirectory(), otherPath + " is still a directory"
    intersection = path.join(testBase, "of")
    t.doesNotThrow (->
      stat = statSync(intersection)
      return
    ), intersection + " can be statted"
    t.ok stat and stat.isDirectory(), intersection + " is still a directory"
    t.end()
    return

  return

