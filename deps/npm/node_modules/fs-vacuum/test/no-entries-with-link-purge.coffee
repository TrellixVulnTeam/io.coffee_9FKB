
# CONSTANTS
log = ->
  messages.push Array::slice.call(arguments).join(" ")
  return
path = require("path")
test = require("tap").test
statSync = require("graceful-fs").statSync
writeFileSync = require("graceful-fs").writeFileSync
symlinkSync = require("graceful-fs").symlinkSync
mkdtemp = require("tmp").dir
mkdirp = require("mkdirp")
vacuum = require("../vacuum.js")
TEMP_OPTIONS =
  unsafeCleanup: true
  mode: "0700"

SHORT_PATH = path.join("i", "am", "a", "path")
TARGET_PATH = "link-target"
FIRST_FILE = path.join(TARGET_PATH, "monsieurs")
SECOND_FILE = path.join(TARGET_PATH, "mesdames")
PARTIAL_PATH = path.join(SHORT_PATH, "with", "a", "definite")
FULL_PATH = path.join(PARTIAL_PATH, "target")
messages = []
testBase = undefined
partialPath = undefined
fullPath = undefined
targetPath = undefined
test "xXx setup xXx", (t) ->
  mkdtemp TEMP_OPTIONS, (er, tmpdir) ->
    t.ifError er, "temp directory exists"
    testBase = path.resolve(tmpdir, SHORT_PATH)
    targetPath = path.resolve(tmpdir, TARGET_PATH)
    partialPath = path.resolve(tmpdir, PARTIAL_PATH)
    fullPath = path.resolve(tmpdir, FULL_PATH)
    mkdirp partialPath, (er) ->
      t.ifError er, "made test path"
      mkdirp targetPath, (er) ->
        t.ifError er, "made target path"
        writeFileSync path.resolve(tmpdir, FIRST_FILE), new Buffer("c'est vraiment joli")
        writeFileSync path.resolve(tmpdir, SECOND_FILE), new Buffer("oui oui")
        symlinkSync targetPath, fullPath
        t.end()
        return

      return

    return

  return

test "remove up to a point", (t) ->
  vacuum fullPath,
    purge: true
    base: testBase
    log: log
  , (er) ->
    verify = ->
      stat = statSync(verifyPath)
      return
    t.ifError er, "cleaned up to base"
    t.equal messages.length, 5, "got 4 removal & 1 finish message"
    t.equal messages[0], "purging " + fullPath
    t.equal messages[4], "finished vacuuming up to " + testBase
    stat = undefined
    verifyPath = fullPath
    i = 0

    while i < 4
      t.throws verify, verifyPath + " cannot be statted"
      t.notOk stat and stat.isDirectory(), verifyPath + " is totally gone"
      verifyPath = path.dirname(verifyPath)
      i++
    t.doesNotThrow (->
      stat = statSync(testBase)
      return
    ), testBase + " can be statted"
    t.ok stat and stat.isDirectory(), testBase + " is still a directory"
    t.end()
    return

  return

